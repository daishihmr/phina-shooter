{"version":3,"sources":["main.js","application.js","assets.js","bombdisplay.js","hudlabel.js","itemdisplay.js","player.js","scorelabel.js","titlelogolabel.js","zankidisplay.js","gamedata.js","background.js","endingscene.js","gameoverscene.js","mainlayer.js","sidebarlayer.js","gamescene.js","loadingscene.js","nameentryscene.js","titlescene.js","gamesequence.js","mainsequence.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"phina-shooter.js","sourcesContent":["var SCREEN_WIDTH = 480;\r\nvar SCREEN_HEIGHT = 320;\r\n// var SCREEN_WIDTH = 720;\r\n// var SCREEN_HEIGHT = 480;\r\n// var SCREEN_WIDTH = 960;\r\n// var SCREEN_HEIGHT = 640;\r\n\r\nvar GAMEAREA_WIDTH = SCREEN_HEIGHT * 0.7;\r\nvar GAMEAREA_HEIGHT = SCREEN_HEIGHT;\r\n\r\nvar SIDEBAR_WIDTH = (SCREEN_WIDTH - GAMEAREA_WIDTH) * 0.5;\r\nvar SIDEBAR_HEIGHT = SCREEN_HEIGHT;\r\n\r\nvar FONT_SIZE_XL = ~~(0.07 * SCREEN_WIDTH);\r\nvar FONT_SIZE_L = ~~(0.03 * SCREEN_WIDTH);\r\nvar FONT_SIZE_M = ~~(0.02 * SCREEN_WIDTH);\r\nvar FONT_SIZE_S = ~~(0.01 * SCREEN_WIDTH);\r\n\r\nphina.main(function() {\r\n\r\n  var app = ps.Application();\r\n  app.run();\r\n  \r\n  app.enableStats();\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Application\", {\r\n    superClass: \"phina.display.CanvasApp\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        query: \"#app\",\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n      });\r\n      this.fps = 60;\r\n      this.canvas.context.imageSmoothingEnabled = true;\r\n      this.domElement.style.imageRendering = \"pixelated\";\r\n\r\n      this.replaceScene(ps.MainSequence());\r\n    }\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Assets\", {\r\n    _static: {\r\n      get: function(name) {\r\n        switch (name) {\r\n\r\n          case \"common\":\r\n            return {\r\n              image: {\r\n                zanki: \"asset/zankiIcon.png\",\r\n                bomb: \"asset/bombIcon.png\",\r\n              },\r\n\r\n              font: {\r\n                title: \"asset/Black_Ops_One/BlackOpsOne-Regular.ttf\",\r\n                main: \"asset/Press_Start_2P/PressStart2P-Regular.ttf\",\r\n                mono: \"asset/VT323/VT323-Regular.ttf\",\r\n                // mono: \"asset/Share_Tech_Mono/ShareTechMono-Regular.ttf\",\r\n              },\r\n            };\r\n\r\n          case \"stage0\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n          case \"stage1\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n          case \"stage2\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n          case \"stage3\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n          case \"stage4\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n        }\r\n      }\r\n    }\r\n  })\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.BombDisplay\", {\r\n    superClass: \"ps.ItemDisplay\",\r\n\r\n    init: function(initialValue) {\r\n      this.superInit(\"bomb\", initialValue);\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.HudLabel\", {\r\n    superClass: \"phina.display.Label\",\r\n\r\n    init: function(options) {\r\n      this.superInit(options.$safe({\r\n        fill: \"white\",\r\n        stroke: null,\r\n        fontSize: FONT_SIZE_M,\r\n        fontFamily: \"main\",\r\n        align: \"left\",\r\n        baseline: \"middle\",\r\n      }));\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.ItemDisplay\", {\r\n    superClass: \"phina.display.CanvasElement\",\r\n\r\n    init: function(textureName, initialValue) {\r\n      this.superInit();\r\n      this.setOrigin(1, 0.5);\r\n      this.textureName = textureName;\r\n\r\n      this._count = initialValue || 0;\r\n      this.updateView();\r\n    },\r\n\r\n    updateView: function() {\r\n      var self = this;\r\n      var t = this.textureName;\r\n      var count = this._count;\r\n\r\n      if (0 < count - this.children.length) {\r\n        (count - this.children.length).times(function(i) {\r\n          var newItem = phina.display.Sprite(t);\r\n          newItem.setPosition(self.children.length * -newItem.width * 1.1, 0)\r\n            .addChildTo(self);\r\n        });\r\n      }\r\n\r\n      this.children.forEach(function(child, i) {\r\n        child.visible = i < count;\r\n      });\r\n    },\r\n\r\n    _accessor: {\r\n      value: {\r\n        get: function() {\r\n          return this._count;\r\n        },\r\n        set: function(v) {\r\n          this._count = v;\r\n          this.updateView();\r\n        }\r\n      }\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Player\", {\r\n    superClass: \"phina.display.Sprite\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n    }\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.ScoreLabel\", {\r\n    superClass: \"phina.display.Label\",\r\n\r\n    init: function(options) {\r\n      this.superInit((options || {}).$safe({\r\n        fill: \"white\",\r\n        stroke: null,\r\n        fontSize: FONT_SIZE_L,\r\n        fontFamily: \"mono\",\r\n        align: \"right\",\r\n        baseline: \"middle\",\r\n      }));\r\n\r\n      this.value = Math.rand(0, 10000000000000);\r\n    },\r\n\r\n    formatText: function() {\r\n      var v = \"\" + Math.floor(this._score);\r\n      Array.range(5, 0).forEach(function(i) {\r\n        var s = i * 3;\r\n        if (s < v.length) {\r\n          v = v.substring(0, v.length - s) + \",\" + v.substring(v.length - s);\r\n        }\r\n      });\r\n\r\n      this.text = v;\r\n    },\r\n    // formatText: function() {\r\n    //   var v = \"\" + Math.floor(this._score);\r\n    //   if (12 < v.length) {\r\n    //     v = v.substring(0, v.length - 12) + \"兆\" + v.substring(v.length - 12);\r\n    //   }\r\n    //   if (8 < v.length) {\r\n    //     v = v.substring(0, v.length - 8) + \"億\" + v.substring(v.length - 8);\r\n    //   }\r\n    //   if (4 < v.length) {\r\n    //     v = v.substring(0, v.length - 4) + \"万\" + v.substring(v.length - 4);\r\n    //   }\r\n\r\n    //   this.text = v;\r\n    // },\r\n\r\n    _accessor: {\r\n      value: {\r\n        get: function() {\r\n          return this._score;\r\n        },\r\n        set: function(v) {\r\n          this._score = v;\r\n          this.formatText();\r\n        }\r\n      }\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.TitleLogoLabel\", {\r\n    superClass: \"phina.display.Label\",\r\n\r\n    init: function(options) {\r\n      this.superInit((options || {}).$safe({\r\n        text: \"Phina Shooter\",\r\n        align: \"center\",\r\n        fontFamily: \"title\",\r\n        fontSize: FONT_SIZE_L,\r\n        fill: \"hsl(50, 80%, 80%)\",\r\n        stroke: \"hsl(0, 100%, 50%)\",\r\n      }));\r\n    }\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.ZankiDisplay\", {\r\n    superClass: \"ps.ItemDisplay\",\r\n\r\n    init: function(initialValue) {\r\n      this.superInit(\"zanki\", initialValue);\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.GameData\", {\r\n    superClass: \"phina.util.EventDispatcher\",\r\n\r\n    currentStage: 0,\r\n\r\n    score: 0,\r\n    zanki: 0,\r\n    bomb: 0,\r\n    psyche: 0,\r\n    highScore: 0,\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this._binder = {};\r\n    },\r\n\r\n    update: function() {\r\n      var self = this;\r\n      self._binder.forIn(function(name, view) {\r\n        if (self[name] !== undefined) {\r\n          view.value = self[name];\r\n        }\r\n      });\r\n    },\r\n\r\n    bind: function(name, view) {\r\n      this._binder[name] = view;\r\n    }\r\n\r\n  });\r\n\r\n});\r\n","phina.main(function() {\r\n  var s = 10;\r\n  var l = s * Math.sqrt(3);\r\n  var bg = phina.graphics.Canvas();\r\n  bg.setSize(l * 2, s * 6);\r\n  bg.strokeStyle = \"hsla(240, 8%, 50%, 0.3)\";\r\n  bg.strokeLines(\r\n    l, 0,\r\n    l, s,\r\n    0, s * 2,\r\n    0, s * 4,\r\n    l, s * 5,\r\n    l, s * 6\r\n  );\r\n  bg.strokeLines(l, s, l * 2, s * 2);\r\n  bg.strokeLines(l, s * 5, l * 2, s * 4);\r\n  document.body.style.backgroundImage = \"url({0})\".format(bg.canvas.toDataURL());\r\n  document.body.style.backgroundRepeat = \"repeat\";\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.EndingScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.GameoverScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.gamescene.MainLayer\", {\r\n    superClass: \"phina.display.Layer\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: GAMEAREA_WIDTH,\r\n        height: GAMEAREA_HEIGHT,\r\n      });\r\n      this.setOrigin(0, 0);\r\n      this.backgroundColor = \"hsl(240, 100%, 5%)\";\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.gamescene.SideBarLayer\", {\r\n    superClass: \"phina.display.Layer\",\r\n\r\n    skipDraw: false,\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SIDEBAR_WIDTH,\r\n        height: SIDEBAR_HEIGHT,\r\n      });\r\n      this.setOrigin(0, 0);\r\n      this.backgroundColor = \"hsl(0, 100%, 7%)\";\r\n      this.gridX = phina.util.Grid(SIDEBAR_WIDTH, 16);\r\n      this.gridY = phina.util.Grid(SIDEBAR_HEIGHT, 17);\r\n    },\r\n\r\n    update: function(app) {\r\n      this.skipDraw = app.ticker.frame % 5 !== 0\r\n    },\r\n\r\n    draw: function(canvas) {\r\n      if (this.skipDraw) {\r\n        var image = this.canvas.domElement;\r\n        canvas.context.drawImage(image,\r\n          0, 0, image.width, image.height, -this.width * this.originX, -this.height * this.originY, this.width, this.height\r\n        );\r\n      } else {\r\n        phina.display.Layer.prototype.draw.call(this, canvas);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  phina.define(\"ps.gamescene.LeftSideBar\", {\r\n    superClass: \"ps.gamescene.SideBarLayer\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this.fromJSON({\r\n        children: {\r\n          scoreLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"SCORE\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(1),\r\n          },\r\n          score: {\r\n            className: \"ps.ScoreLabel\",\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(2),\r\n          },\r\n\r\n          psycheLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"PSYCHE\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(3),\r\n          },\r\n          psyche: {\r\n            className: \"ps.ScoreLabel\",\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(4),\r\n          },\r\n\r\n          highScoreLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"HIGH SCORE\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(15),\r\n          },\r\n          highScore: {\r\n            className: \"ps.ScoreLabel\",\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(16),\r\n          },\r\n        }\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n  phina.define(\"ps.gamescene.RightSideBar\", {\r\n    superClass: \"ps.gamescene.SideBarLayer\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this.fromJSON({\r\n        children: {\r\n          zankiLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"ZANKI\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(1),\r\n          },\r\n          zanki: {\r\n            className: \"ps.ZankiDisplay\",\r\n            arguments: 3 - 1,\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(2),\r\n          },\r\n\r\n          bombLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"BOMBER\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(3),\r\n          },\r\n          bomb: {\r\n            className: \"ps.BombDisplay\",\r\n            arguments: 3,\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(4),\r\n          },\r\n\r\n          gameTitleLabel: {\r\n            className: \"ps.TitleLogoLabel\",\r\n            x: this.gridX.center(),\r\n            y: this.gridY.span(16),\r\n          },\r\n        }\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.GameScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function(params) {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n\r\n      this.fromJSON({\r\n        stageId: params.stageId,\r\n        children: {\r\n          leftSideBar: {\r\n            className: \"ps.gamescene.LeftSideBar\",\r\n            x: 0,\r\n            y: 0,\r\n          },\r\n          rightSideBar: {\r\n            className: \"ps.gamescene.RightSideBar\",\r\n            x: SCREEN_WIDTH - SIDEBAR_WIDTH,\r\n            y: 0,\r\n          },\r\n          mainLayer: {\r\n            className: \"ps.gamescene.MainLayer\",\r\n            x: SIDEBAR_WIDTH,\r\n            y: 0,\r\n          },\r\n        }\r\n      });\r\n    },\r\n\r\n    update: function() {}\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.LoadingScene\", {\r\n    superClass: \"phina.game.LoadingScene\",\r\n\r\n    init: function(params) {\r\n      this.superInit({\r\n        assets: ps.Assets.get(params.assetType),\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        lie: false,\r\n        exitType: \"auto\",\r\n      });\r\n      this.fromJSON({\r\n        backgroundColor: \"black\",\r\n        children: {\r\n          label: {\r\n            className: \"ps.TitleLogoLabel\",\r\n            arguments: {\r\n              text: \"downloading\"\r\n            },\r\n            x: SCREEN_WIDTH * 0.5,\r\n            y: SCREEN_HEIGHT * 0.5,\r\n            onenterframe: function(e) {\r\n              var c = ~~(e.app.ticker.frame / 10) % 5;\r\n              this.text = \"downloading\" + \".\".repeat(c);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.NameEntryScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.TitleScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          title: {\r\n            className: \"ps.TitleLogoLabel\",\r\n            arguments: {\r\n              fontSize: FONT_SIZE_XL,\r\n            },\r\n            x: SCREEN_WIDTH * 0.5,\r\n            y: SCREEN_HEIGHT * 0.5,\r\n          }\r\n        }\r\n      });\r\n\r\n      this.tweener.wait(500).call(function() {\r\n        this.exit(\"arcadeMode\");\r\n      }.bind(this));\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  /**\r\n   * arcadeモード\r\n   */\r\n  phina.define(\"ps.ArcadeModeSequence\", {\r\n    superClass: \"phina.game.ManagerScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        scenes: [\r\n\r\n          Array.range(0, 5).map(function(stageId) {\r\n            var stageName = \"stage{0}\".format(stageId);\r\n            if (stageId < 4) {\r\n              next = \"stage{0}preload\".format(stageId + 1);\r\n            } else {\r\n              next = \"ending\";\r\n            }\r\n            return [\r\n\r\n              {\r\n                label: stageName + \"preload\",\r\n                className: \"ps.LoadingScene\",\r\n                arguments: {\r\n                  assetType: stageName\r\n                },\r\n                nextLabel: stageName,\r\n              },\r\n\r\n              {\r\n                label: stageName,\r\n                className: \"ps.GameScene\",\r\n                arguments: {\r\n                  stageId: stageId\r\n                },\r\n                nextLabel: next,\r\n              },\r\n\r\n            ];\r\n          }),\r\n\r\n          {\r\n            label: \"ending\",\r\n            className: \"ps.EndingScene\",\r\n            nextLabel: \"gameover\",\r\n          },\r\n\r\n          {\r\n            label: \"gameover\",\r\n            className: \"ps.GameoverScene\",\r\n            nextLabel: \"nameEntry\",\r\n          },\r\n\r\n          {\r\n            label: \"nameEntry\",\r\n            className: \"ps.NameEntryScene\",\r\n          },\r\n\r\n        ].flatten(),\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.MainSequence\", {\r\n    superClass: \"phina.game.ManagerScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        scenes: [\r\n\r\n          {\r\n            label: \"load\",\r\n            className: \"ps.LoadingScene\",\r\n            arguments: {\r\n              assetType: \"common\"\r\n            },\r\n            nextLabel: \"title\",\r\n          },\r\n\r\n          {\r\n            label: \"title\",\r\n            className: \"ps.TitleScene\",\r\n          },\r\n\r\n          {\r\n            label: \"arcadeMode\",\r\n            className: \"ps.ArcadeModeSequence\",\r\n            nextLabel: \"title\",\r\n          },\r\n          \r\n        ],\r\n\r\n        startLabel: \"load\",\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"/source/"}