{"version":3,"sources":["main.js","application.js","assets.js","danmaku.js","color.js","bombdisplay.js","bullet.js","enemy.js","backgroundlayer.js","bulletlayer.js","effectlayer.js","mainlayer.js","sidebarlayer.js","hudlabel.js","itemdisplay.js","outlinedsprite.js","player.js","scorelabel.js","shot.js","titlelogolabel.js","zankidisplay.js","bulletconfig.js","gamedata.js","background.js","endingscene.js","gameoverscene.js","gamescene.js","loadingscene.js","nameentryscene.js","resultscene.js","settingscene.js","titlescene.js","tutorialscene.js","gamesequence.js","mainsequence.js","rankingscene.js","background1.js","stage.js","stage1.js","textureedit.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfjSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzxvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACflCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnlJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"phina-shooter.js","sourcesContent":["var SCREEN_WIDTH = 480;\nvar SCREEN_HEIGHT = 320;\n// var SCREEN_WIDTH = 720;\n// var SCREEN_HEIGHT = 480;\n// var SCREEN_WIDTH = 960;\n// var SCREEN_HEIGHT = 640;\n\nvar GAMEAREA_WIDTH = SCREEN_HEIGHT * 0.7;\nvar GAMEAREA_HEIGHT = SCREEN_HEIGHT;\n\nvar SIDEBAR_WIDTH = (SCREEN_WIDTH - GAMEAREA_WIDTH) * 0.5;\nvar SIDEBAR_HEIGHT = SCREEN_HEIGHT;\n\nvar FONT_SIZE_XL = ~~(0.07 * SCREEN_WIDTH);\nvar FONT_SIZE_L = ~~(0.03 * SCREEN_WIDTH);\nvar FONT_SIZE_M = ~~(0.02 * SCREEN_WIDTH);\nvar FONT_SIZE_S = ~~(0.01 * SCREEN_WIDTH);\n\nphina.main(function() {\n  ps.Color.initialize();\n\n  var app = ps.Application();\n  app.run();\n  \n  app.enableStats();\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.Application\", {\n    superClass: \"phina.display.CanvasApp\",\n\n    init: function() {\n      this.superInit({\n        query: \"#app\",\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n      });\n      this.fps = 60;\n      this.canvas.context.imageSmoothingEnabled = true;\n      this.domElement.style.imageRendering = \"pixelated\";\n\n      this.replaceScene(ps.MainSequence());\n\n      this.gamepads = phina.input.GamepadManager();\n    },\n\n    update: function() {\n      this.mouse.update();\n      this.touch.update();\n      this.touchList.update();\n      this.keyboard.update();\n      this.gamepads.update();\n    },\n\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.Assets\", {\n    _static: {\n      get: function(name) {\n        switch (name) {\n\n          case \"common\":\n            return {\n              image: {\n                player: \"asset/player.png\",\n                bullet: \"asset/bullets.png\",\n                bomb: \"asset/bomb.png\",\n\n                zanki: \"asset/zankiIcon.png\",\n                bombIcon: \"asset/bombIcon.png\",\n              },\n\n              font: {\n                title: \"asset/Black_Ops_One/BlackOpsOne-Regular.ttf\",\n                main: \"asset/Press_Start_2P/PressStart2P-Regular.ttf\",\n                // mono: \"asset/VT323/VT323-Regular.ttf\",\n                mono: \"asset/Share_Tech_Mono/ShareTechMono-Regular.ttf\",\n              },\n            };\n\n          case \"stage0\":\n            return {\n              image: {\n                dummy: \"asset/zankiIcon.png\",\n              },\n            };\n\n          case \"stage1\":\n            return {\n              image: {\n                dummy: \"asset/zankiIcon.png\",\n              },\n            };\n\n          case \"stage2\":\n            return {\n              image: {\n                dummy: \"asset/zankiIcon.png\",\n              },\n            };\n\n          case \"stage3\":\n            return {\n              image: {\n                dummy: \"asset/zankiIcon.png\",\n              },\n            };\n\n          case \"stage4\":\n            return {\n              image: {\n                dummy: \"asset/zankiIcon.png\",\n              },\n            };\n\n        }\n      }\n    }\n  })\n});\n","phina.namespace(function() {\n\n  var action = bulletml.dsl.action;\n  var actionRef = bulletml.dsl.actionRef;\n  var bullet = bulletml.dsl.bullet;\n  var bulletRef = bulletml.dsl.bulletRef;\n  var fire = bulletml.dsl.fire;\n  var fireRef = bulletml.dsl.fireRef;\n  var changeDirection = bulletml.dsl.changeDirection;\n  var changeSpeed = bulletml.dsl.changeSpeed;\n  var accel = bulletml.dsl.accel;\n  var wait = bulletml.dsl.wait;\n  var vanish = bulletml.dsl.vanish;\n  var repeat = bulletml.dsl.repeat;\n  var bindVar = bulletml.dsl.bindVar;\n  var notify = bulletml.dsl.notify;\n  var direction = bulletml.dsl.direction;\n  var speed = bulletml.dsl.speed;\n  var horizontal = bulletml.dsl.horizontal;\n  var vertical = bulletml.dsl.vertical;\n  var fireOption = bulletml.dsl.fireOption;\n  var offsetX = bulletml.dsl.offsetX;\n  var offsetY = bulletml.dsl.offsetY;\n  var autonomy = bulletml.dsl.autonomy;\n\n  var interval = function(v) {\n    return wait(\"{0} * (0.3 + (1.0 - $densityRank) * 0.7)\".format(v));\n  };\n  var spd = function(v) {\n    return speed(\"{0} * (1.0 + $speedRank * 2.0)\".format(v));\n  };\n  var spdSeq = function(v) {\n    return speed(\"{0} * (1.0 + $speedRank * 2.0)\".format(v), \"sequence\");\n  };\n\n  var B0 = bullet({\n    type: 0\n  });\n  var B1 = bullet({\n    type: 1\n  });\n  var B2 = bullet({\n    type: 2\n  });\n  var B3 = bullet({\n    type: 3\n  });\n  var R0 = bullet({\n    type: 4\n  });\n  var R1 = bullet({\n    type: 5\n  });\n  var R2 = bullet({\n    type: 6\n  });\n  var R3 = bullet({\n    type: 7\n  });\n  var B4 = bullet({\n    type: 8\n  });\n  var B5 = bullet({\n    type: 9\n  });\n  var R4 = bullet({\n    type: 10\n  });\n  var R5 = bullet({\n    type: 11\n  });\n  var DM = bullet({\n    dummy: true\n  });\n\n  ps.danmaku = {};\n\n  // ザコ\n  var basic = function(dir) {\n    return new bulletml.Root({\n      top: action([\n        interval(10),\n        repeat(Infinity, [\n          fire(DM, spd(1), direction(dir)),\n          repeat(\"$burst\", [\n            fire(R2, spdSeq(0.15), direction(0, \"sequence\")),\n          ]),\n          interval(90),\n        ]),\n      ]),\n    });\n  };\n  ps.danmaku.basic = basic(0);\n  ps.danmaku.basicR1 = basic(-5);\n  ps.danmaku.basicL1 = basic(+5);\n  ps.danmaku.basicR2 = basic(-15);\n  ps.danmaku.basicL2 = basic(+15);\n\n  // ザコ3way\n  var basic3 = function(dir) {\n    return new bulletml.Root({\n      top: action([\n        interval(10),\n        repeat(Infinity, [\n          fire(DM, spd(1), direction(dir - 7)),\n          repeat(\"$burst\", [\n            fire(R2, spdSeq(0.05), direction(0, \"sequence\")),\n            fire(R2, spdSeq(0), direction(7, \"sequence\")),\n            fire(R2, spdSeq(0), direction(7, \"sequence\")),\n            fire(DM, spdSeq(0), direction(-14, \"sequence\")),\n          ]),\n          interval(90),\n        ]),\n      ]),\n    });\n  };\n  ps.danmaku.basic3 = basic3(0);\n  ps.danmaku.basic3R1 = basic3(-5);\n  ps.danmaku.basic3L1 = basic3(+5);\n  ps.danmaku.basic3R2 = basic3(-15);\n  ps.danmaku.basic3L2 = basic3(+15);\n\n  // Stage1 ------------------------------\n\n  // 黒川\n  ps.danmaku.kurokawa1 = new bulletml.Root({\n    top: action([\n      interval(20),\n      repeat(Infinity, [\n        repeat(3, [\n          fire(DM, spd(1.2)),\n          repeat(3, [\n            fire(R0, spdSeq(0), direction(0, \"sequence\")),\n            wait(6),\n          ]),\n          interval(12),\n        ]),\n        interval(50),\n      ]),\n    ]),\n  });\n\n  // 秋元\n  ps.danmaku.akimoto1 = new bulletml.Root({\n    top0: action([\n      repeat(Infinity, [\n        interval(20),\n        fire(R2, spd(1.0), direction(-30)),\n        repeat(8, [\n          fire(R2, spdSeq(0), direction(60 / 8, \"sequence\")),\n        ]),\n        interval(80),\n      ]),\n    ]),\n    top1: action([\n      repeat(Infinity, [\n        interval(50),\n        fire(R1, spd(1.2), direction(-10)),\n        repeat(6, [\n          fire(R1, spdSeq(0), direction(20 / 6, \"sequence\")),\n        ]),\n        interval(50),\n      ]),\n    ]),\n  });\n\n  // 黄瀬\n  ps.danmaku.kise1 = new bulletml.Root({\n    top: action([\n      interval(20),\n      repeat(Infinity, [\n        fire(DM, spd(1.4)),\n        repeat(12, [\n          fire(R4, spdSeq(0), direction(360 / (12 - 1), \"sequence\")),\n        ]),\n        interval(90),\n      ]),\n    ]),\n  });\n\n  // Stage2 ------------------------------\n  // Stage3 ------------------------------\n  // Stage4 ------------------------------\n  // Stage5 ------------------------------\n\n});\n","phina.namespace(function() {\n  // Color Palette by Paletton.com\n  // Palette URL: http://paletton.com/#uid=50f1n0kmGpNdfBfixtwqklHuEgU\n\n  phina.define(\"ps.Color\", {\n    init: function() {},\n    _static: {\n      pri: [],\n      sec0: [],\n      sec1: [],\n\n      initialize: function(scene) {\n        ps.Color.pri = [];\n        ps.Color.sec0 = [];\n        ps.Color.sec1 = [];\n        ps.Color.pria = [];\n        ps.Color.sec0a = [];\n        ps.Color.sec1a = [];\n\n        var p0 = 21;\n        var r = 140;\n        var s0 = (p0 - r + 360) % 360;\n        var s1 = (p0 + r + 360) % 360;\n\n        var size = 15;\n        var sMin = 48;\n        var sMax = 90;\n        var sLev = (sMax - sMin) / (size - 1);\n        var hMin = 5;\n        var hMax = 84;\n        var hLev = (hMax - hMin) / (size - 1);\n        Array.range(0, size).forEach(function(i) {\n          var s = Math.floor(sMin + sLev * i);\n          var h = Math.floor(hMin + hLev * i);\n          ps.Color.pri[i] = \"hsl({0},{1}%,{2}%)\"    .format(p0, s, h);\n          ps.Color.sec0[i] = \"hsl({0},{1}%,{2}%)\"   .format(s0, s, h);\n          ps.Color.sec1[i] = \"hsl({0},{1}%,{2}%)\"   .format(s1, s, h);\n          ps.Color.pria[i] = \"hsla({0},{1}%,{2}%,\"  .format(p0, s, h) + \"{0})\";\n          ps.Color.sec0a[i] = \"hsla({0},{1}%,{2}%,\" .format(s0, s, h) + \"{0})\";\n          ps.Color.sec1a[i] = \"hsla({0},{1}%,{2}%,\" .format(s1, s, h) + \"{0})\";\n        });\n\n        if (scene) ps.Color.test().addChildTo(scene);\n      },\n\n      test: function() {\n        var r = phina.display.CanvasElement();\n        ps.Color.pri.forEach(function(c, i) {\n          phina.display.RectangleShape({\n              width: 20,\n              height: 20,\n              fill: c,\n              stroke: null,\n            })\n            .setPosition(20 + i * 20, 20 + 20)\n            .addChildTo(r);\n        });\n\n        ps.Color.sec0.forEach(function(c, i) {\n          phina.display.RectangleShape({\n              width: 20,\n              height: 20,\n              fill: c,\n              stroke: null,\n            })\n            .setPosition(20 + i * 20, 20 + 0)\n            .addChildTo(r);\n        });\n\n        ps.Color.sec1.forEach(function(c, i) {\n          phina.display.RectangleShape({\n              width: 20,\n              height: 20,\n              fill: c,\n              stroke: null,\n            })\n            .setPosition(20 + i * 20, 20 + 40)\n            .addChildTo(r);\n        });\n\n        return r;\n      }\n    },\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.BombDisplay\", {\n    superClass: \"ps.ItemDisplay\",\n\n    init: function(initialValue) {\n      this.superInit(\"bombIcon\", initialValue);\n    },\n\n  });\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.Bullet\", {\n    superClass: \"ps.OutlinedSprite\",\n\n    runner: null,\n    dummy: false,\n\n    init: function() {\n      this.superInit(\"bullet\", 24, 24);\n      this.age = 0;\n    },\n\n    update: function(app) {\n      var runner = this.runner;\n      if (runner) {\n        var pos = this.position;\n        \n        var bx = pos.x;\n        var by = pos.y;\n        runner.update();\n        var dx = runner.x - bx;\n        var dy = runner.y - by;\n\n        pos.x += dx * ps.Bullet.globalSpeedRate;\n        pos.y += dy * ps.Bullet.globalSpeedRate;\n\n        this.rotation = Math.atan2(pos.y - by, pos.x - bx) * 180 / Math.PI;\n\n        this.age += 1;\n      }\n    },\n\n    _static: {\n      globalSpeedRate: 1.0,\n    },\n\n  });\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.Enemy\", {\n    superClass: \"phina.display.Sprite\",\n\n    hp: 0,\n    score: 0,\n\n    init: function(params) {\n      this.superInit(params.texture, params.width, params.height);\n      this.$extend(params);\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.BackgroundLayer\", {\n    superClass: \"phina.display.Layer\",\n\n    renderChildBySelf: true,\n    skip: false,\n\n    init: function(params) {\n      this.superInit({\n        width: GAMEAREA_WIDTH,\n        height: GAMEAREA_HEIGHT,\n      });\n      this.setOrigin(0, 0);\n      this.backgroundColor = params.backgroundColor;\n\n      this.stroke = params.stroke;\n      this.fill = params.fill;\n      this.lineWidth = 1;\n\n      this.camera = ps.bg.Camera().addChildTo(this);\n    },\n\n    update: function(app) {\n      this.skip = app.ticker.frame % 3 !== 0;\n    },\n\n    render: function() {\n      var self = this;\n      var cam = this.camera;\n      var canvas = this.canvas;\n      var w = canvas.canvas.width;\n      var h = canvas.canvas.height;\n\n      canvas.clearColor(this.backgroundColor);\n\n      if (self.stroke) {\n        canvas.strokeStyle = self.stroke;\n        canvas.context.lineWidth = self.lineWidth;\n      }\n      if (self.fill) {\n        canvas.fillStyle = self.fill;\n        canvas.fill();\n      }\n\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        var child = this.children[i];\n        if (child instanceof ps.bg.Polygon) {\n          var src = child.render(cam);\n          var positions = [];\n          for (var s = 0, slen = src.length; s < slen; s++) {\n            var pos = src[s];\n            if (pos[3] < 0) {\n              positions = [];\n              break;\n            } else {\n              positions.push(((pos[0] / pos[3]) + 0.5) * w);\n              positions.push((-(pos[1] / pos[3]) + 0.5) * h);\n            }\n          }\n\n          var alpha = Math.clamp(1.0 - src[0][2] * 0.032, 0.0, 1.0);\n          if (alpha < 0.01) continue;\n          canvas.context.globalAlpha = alpha;\n\n          if (4 <= positions.length) {\n            canvas.beginPath();\n            canvas.lines.apply(canvas, positions);\n            canvas.closePath();\n            if (self.stroke) canvas.stroke();\n            if (self.fill) canvas.fill();\n          } else if (positions.length === 2) {\n            canvas.beginPath();\n            canvas.rect(positions[0], positions[1], 1, 1);\n            canvas.closePath();\n            if (self.stroke) canvas.stroke();\n            if (self.fill) canvas.fill();\n          }\n        }\n      }\n\n      canvas.context.globalAlpha = 1.0;\n    },\n\n    draw: function(canvas) {\n      if (!this.skip) this.render();\n\n      var image = this.canvas.domElement;\n      canvas.context.drawImage(image,\n        0, 0, image.width, image.height, -this.width * this.originX, -this.height * this.originY, this.width, this.height\n      );\n    },\n  });\n\n  phina.define(\"ps.bg.Camera\", {\n    superClass: \"phina.app.Element\",\n\n    init: function() {\n      this.superInit();\n\n      this.position = vec3.set(vec3.create(), 5, 3, 50);\n      this.target = vec3.set(vec3.create(), 0, 0, 0);\n      this.up = vec3.set(vec3.create(), 0, 1, 0);\n\n      this.vMatrix = mat4.create();\n      this.pMatrix = mat4.perspective(mat4.create(), 70, GAMEAREA_WIDTH / GAMEAREA_HEIGHT, 0.1, 10000);\n\n      this.vpMatrix = mat4.create();\n\n      this.needsUpdate = true;\n    },\n\n    update: function() {\n      if (this.needsUpdate) {\n        mat4.lookAt(this.vMatrix, this.position, this.target, this.up);\n        mat4.mul(this.vpMatrix, this.pMatrix, this.vMatrix);\n        this.needsUpdate = false;\n      }\n    },\n\n    _accessor: {\n      x: {\n        get: function() {\n          return this.position[0];\n        },\n        set: function(v) {\n          this.position[0] = v;\n          this.needsUpdate = true;\n        }\n      },\n      y: {\n        get: function() {\n          return this.position[1];\n        },\n        set: function(v) {\n          this.position[1] = v;\n          this.needsUpdate = true;\n        }\n      },\n      z: {\n        get: function() {\n          return this.position[2];\n        },\n        set: function(v) {\n          this.position[2] = v;\n          this.needsUpdate = true;\n        }\n      },\n      targetX: {\n        get: function() {\n          return this.target[0];\n        },\n        set: function(v) {\n          this.target[0] = v;\n          this.needsUpdate = true;\n        }\n      },\n      targetY: {\n        get: function() {\n          return this.target[1];\n        },\n        set: function(v) {\n          this.target[1] = v;\n          this.needsUpdate = true;\n        }\n      },\n      targetZ: {\n        get: function() {\n          return this.target[2];\n        },\n        set: function(v) {\n          this.target[2] = v;\n          this.needsUpdate = true;\n        }\n      },\n      upX: {\n        get: function() {\n          return this.up[0];\n        },\n        set: function(v) {\n          this.up[0] = v;\n          this.needsUpdate = true;\n        }\n      },\n      upY: {\n        get: function() {\n          return this.up[1];\n        },\n        set: function(v) {\n          this.up[1] = v;\n          this.needsUpdate = true;\n        }\n      },\n      upZ: {\n        get: function() {\n          return this.up[2];\n        },\n        set: function(v) {\n          this.up[2] = v;\n          this.needsUpdate = true;\n        }\n      },\n    }\n  });\n\n  phina.define(\"ps.bg.Polygon\", {\n    superClass: \"phina.app.Element\",\n\n    init: function(params) {\n      this.superInit();\n\n      this.vertices = params.vertices.map(function(vertex) {\n        return vec4.set(vec4.create(), vertex[0], vertex[1], vertex[2], 1);\n      });\n\n      this.calcPosition = this.vertices.map(function(vertex) {\n        return vec4.clone(vertex);\n      });\n\n      // this.rotation = quat.create();\n      this.translation = vec3.create();\n      // this.scale = vec3.set(vec3.create(), 1, 1, 1);\n\n      this.mMatrix = mat4.create();\n      this.mvpMatrix = mat4.create();\n\n      this.needsUpdate = true;\n    },\n\n    update: function() {\n      if (this.needsUpdate) {\n        // mat4.fromRotationTranslationScale(this.mMatrix, this.rotation, this.translation, this.scale);\n        mat4.fromTranslation(this.mMatrix, this.translation);\n        this.needsUpdate = false;\n      }\n    },\n\n    render: function(camera) {\n      var vertices = this.vertices;\n      var calcPosition = this.calcPosition;\n      var mvp = mat4.mul(this.mvpMatrix, camera.vpMatrix, this.mMatrix);\n\n      for (var i = 0, len = vertices.length; i < len; i++) {\n        var vertex = vertices[i];\n        vec4.transformMat4(calcPosition[i], vertex, mvp);\n      }\n\n      return calcPosition;\n    },\n\n    setTranslation: function(x, y, z) {\n      this.translation[0] = x;\n      this.translation[1] = y;\n      this.translation[2] = z;\n      return this;\n    },\n\n    _accessor: {\n      x: {\n        get: function() {\n          return this.translation[0];\n        },\n        set: function(v) {\n          this.translation[0] = v;\n          this.needsUpdate = true;\n        }\n      },\n      y: {\n        get: function() {\n          return this.translation[1];\n        },\n        set: function(v) {\n          this.translation[1] = v;\n          this.needsUpdate = true;\n        }\n      },\n      z: {\n        get: function() {\n          return this.translation[2];\n        },\n        set: function(v) {\n          this.translation[2] = v;\n          this.needsUpdate = true;\n        }\n      },\n    },\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.BulletLayer\", {\n    superClass: \"phina.display.CanvasElement\",\n    \n    bullets: null,\n\n    init: function() {\n      this.superInit({\n        width: GAMEAREA_WIDTH,\n        height: GAMEAREA_HEIGHT,\n      });\n      this.setOrigin(0, 0);\n      this.backgroundColor = null;\n      \n      this.bullets = [];\n    },\n\n    spawn: function(runner, spec) {\n      var bullet = ps.Bullet().addChildTo(this);\n      bullet.position.x = runner.x;\n      bullet.position.y = runner.y;\n      bullet.runner = runner;\n      bullet.frameIndex = spec.type || 0;\n      if (spec.dummy) {\n        bullet.visible = false;\n      }\n    },\n\n    update: function() {\n      var bs = this.children.slice(0);\n      for (var i = 0, len = bs.length; i < len; i++) {\n        var b = bs[i];\n        if (b.x < 0 || GAMEAREA_WIDTH < b.x || b.y < 0 || GAMEAREA_HEIGHT < b.y) {\n          b.remove();\n        }\n      }\n    },\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.EffectLayer\", {\n    superClass: \"phina.display.CanvasElement\",\n\n    init: function() {\n      this.superInit();\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.gamescene.MainLayer\", {\n    superClass: \"phina.display.Layer\",\n\n    init: function(params) {\n      this.superInit({\n        width: GAMEAREA_WIDTH,\n        height: GAMEAREA_HEIGHT,\n      });\n      this.setOrigin(0, 0);\n      this.backgroundColor = null;\n\n      var self = this;\n\n      this.fromJSON({\n        children: {\n          backgroundLayer: {\n            className: params.stage.backgroundClassName,\n            // draw: function(canvas) {\n            // canvas.context.globalCompositeOperation = \"source-over\";\n            // },\n          },\n\n          scoreItemLayer: {\n            className: \"phina.app.Element\",\n            // draw: function(canvas) {\n            // canvas.context.globalCompositeOperation = \"source-over\";\n            // },\n          },\n\n          shotLayer: {\n            className: \"phina.app.Element\",\n            // draw: function(canvas) {\n            // canvas.context.globalCompositeOperation = \"lighter\";\n            // },\n          },\n\n          effectLayer0: {\n            className: \"phina.display.CanvasElement\",\n            children: {\n              playerBurnerL: {\n                className: \"ps.AfterBurner\",\n                onenterframe: function() {\n                  this.position.x = self.player.position.x - 4;\n                  this.position.y = self.player.position.y + 10;\n                }\n              },\n              playerBurnerR: {\n                className: \"ps.AfterBurner\",\n                onenterframe: function() {\n                  this.position.x = self.player.position.x + 4;\n                  this.position.y = self.player.position.y + 10;\n                }\n              },\n            },\n          },\n\n          player: {\n            className: \"ps.Player\",\n            x: GAMEAREA_WIDTH * 0.5,\n            y: GAMEAREA_HEIGHT * 0.9,\n            // draw: function(canvas) {\n            // canvas.context.globalCompositeOperation = \"source-over\";\n            // },\n          },\n\n          itemLayer: {\n            className: \"phina.app.Element\",\n            // draw: function(canvas) {\n            // canvas.context.globalCompositeOperation = \"source-over\";\n            // },\n          },\n\n          enemyLayer: {\n            className: \"phina.app.Element\",\n            // draw: function(canvas) {\n            // canvas.context.globalCompositeOperation = \"source-over\";\n            // },\n          },\n\n          effectLayer1: {\n            className: \"phina.app.Element\",\n            // draw: function(canvas) {\n            // canvas.context.globalCompositeOperation = \"lighter\";\n            // },\n          },\n\n          bulletLayer: {\n            className: \"ps.BulletLayer\",\n            // draw: function(canvas) {\n            //   canvas.context.globalCompositeOperation = \"lighter\";\n            // },\n          },\n\n          dummy: {\n            className: \"phina.app.Element\",\n            // draw: function(canvas) {\n            //   canvas.context.globalCompositeOperation = \"source-over\";\n            // },\n          },\n\n          playerMarker: {\n            className: \"phina.display.CircleShape\",\n            arguments: {\n              radius: 3,\n              fill: ps.Color.sec0[13],\n              stroke: ps.Color.sec0[3],\n              strokeWidth: 1.3,\n            },\n            onenterframe: function(e) {\n              this.setScale(0.9 + Math.sin(e.app.ticker.frame * 0.3) * 0.1);\n              this.position = self.player.position;\n            },\n          }\n        }\n      });\n    }\n\n  });\n});","phina.namespace(function() {\n\n  phina.define(\"ps.gamescene.SideBarLayer\", {\n    superClass: \"phina.display.Layer\",\n\n    skipDraw: false,\n\n    init: function() {\n      this.superInit({\n        width: SIDEBAR_WIDTH,\n        height: SIDEBAR_HEIGHT,\n      });\n      this.setOrigin(0, 0);\n      this.backgroundColor = ps.Color.pri[0];\n      this.gridX = phina.util.Grid(SIDEBAR_WIDTH, 16);\n      this.gridY = phina.util.Grid(SIDEBAR_HEIGHT, 17);\n    },\n\n    bindGameData: function(gameData) {},\n\n    update: function(app) {\n      this.skipDraw = app.ticker.frame % 5 !== 0\n    },\n\n    draw: function(canvas) {\n      if (this.skipDraw) {\n        var image = this.canvas.domElement;\n        canvas.context.drawImage(image,\n          0, 0, image.width, image.height, -this.width * this.originX, -this.height * this.originY, this.width, this.height\n        );\n      } else {\n        phina.display.Layer.prototype.draw.call(this, canvas);\n      }\n    }\n\n  });\n\n  phina.define(\"ps.gamescene.LeftSideBar\", {\n    superClass: \"ps.gamescene.SideBarLayer\",\n\n    init: function() {\n      this.superInit();\n      this.fromJSON({\n        children: {\n          scoreLabel: {\n            className: \"ps.HudLabel\",\n            arguments: {\n              text: \"SCORE\",\n            },\n            x: this.gridX.span(1),\n            y: this.gridY.span(1),\n          },\n          score: {\n            className: \"ps.ScoreLabel\",\n            x: this.gridX.span(15),\n            y: this.gridY.span(2),\n          },\n\n          psycheLabel: {\n            className: \"ps.HudLabel\",\n            arguments: {\n              text: \"PSYCHE\",\n            },\n            x: this.gridX.span(1),\n            y: this.gridY.span(3),\n          },\n          psyche: {\n            className: \"ps.ScoreLabel\",\n            x: this.gridX.span(15),\n            y: this.gridY.span(4),\n          },\n\n          highScoreLabel: {\n            className: \"ps.HudLabel\",\n            arguments: {\n              text: \"HIGH SCORE\",\n            },\n            x: this.gridX.span(1),\n            y: this.gridY.span(15),\n          },\n          highScore: {\n            className: \"ps.ScoreLabel\",\n            x: this.gridX.span(15),\n            y: this.gridY.span(16),\n          },\n        }\n      });\n    },\n\n    bindGameData: function(gameData) {\n      gameData.bind(\"score\", this.score);\n      gameData.bind(\"psyche\", this.psyche);\n      gameData.bind(\"highScore\", this.highScore);\n    },\n\n  });\n\n  phina.define(\"ps.gamescene.RightSideBar\", {\n    superClass: \"ps.gamescene.SideBarLayer\",\n\n    init: function() {\n      this.superInit();\n      this.fromJSON({\n        children: {\n          zankiLabel: {\n            className: \"ps.HudLabel\",\n            arguments: {\n              text: \"ZANKI\",\n            },\n            x: this.gridX.span(1),\n            y: this.gridY.span(1),\n          },\n          zanki: {\n            className: \"ps.ZankiDisplay\",\n            arguments: 3 - 1,\n            x: this.gridX.span(15),\n            y: this.gridY.span(2),\n          },\n\n          bombLabel: {\n            className: \"ps.HudLabel\",\n            arguments: {\n              text: \"BOMB\",\n            },\n            x: this.gridX.span(1),\n            y: this.gridY.span(3),\n          },\n          bomb: {\n            className: \"ps.BombDisplay\",\n            arguments: 3,\n            x: this.gridX.span(15),\n            y: this.gridY.span(4),\n          },\n\n          gameTitleLabel: {\n            className: \"ps.TitleLogoLabel\",\n            x: this.gridX.center(),\n            y: this.gridY.span(16),\n          },\n        }\n      });\n    },\n\n    bindGameData: function(gameData) {\n      gameData.bind(\"zanki\", this.zanki);\n      gameData.bind(\"bomb\", this.bomb);\n    },\n\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.HudLabel\", {\n    superClass: \"phina.display.Label\",\n\n    init: function(options) {\n      this.superInit(options.$safe({\n        fill: ps.Color.sec0[14],\n        stroke: ps.Color.sec0[6],\n        fontSize: FONT_SIZE_M,\n        fontFamily: \"main\",\n        align: \"left\",\n        baseline: \"middle\",\n      }));\n    },\n\n  });\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.ItemDisplay\", {\n    superClass: \"phina.display.CanvasElement\",\n\n    init: function(textureName, initialValue) {\n      this.superInit();\n      this.setOrigin(1, 0.5);\n      this.textureName = textureName;\n\n      this._count = initialValue || 0;\n      this.updateView();\n    },\n\n    updateView: function() {\n      var self = this;\n      var t = this.textureName;\n      var count = this._count;\n\n      if (0 < count - this.children.length) {\n        (count - this.children.length).times(function(i) {\n          var newItem = phina.display.Sprite(t);\n          newItem.setPosition(self.children.length * -newItem.width * 1.02, 0)\n            .addChildTo(self);\n        });\n      }\n\n      this.children.forEach(function(child, i) {\n        child.visible = i < count;\n      });\n    },\n\n    _accessor: {\n      value: {\n        get: function() {\n          return this._count;\n        },\n        set: function(v) {\n          this._count = v;\n          this.updateView();\n        }\n      }\n    }\n\n  });\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.OutlinedSprite\", {\n    superClass: \"phina.display.Sprite\",\n\n    init: function(texture, width, height) {\n      this.superInit(texture, width, height);\n\n      var self = this;\n\n      this.outline = phina.display.Sprite(texture + \"Outline\", width, height).addChildTo(this);\n      this.outline.update = function(app) {\n        this.frameIndex = self.frameIndex;\n        this.alpha = ps.OutlinedSprite.staticAlpha;\n      };\n      this.outline.draw = function(canvas) {\n        phina.display.Sprite.prototype.draw.call(this, canvas);\n      }\n    },\n\n    _static: {\n      staticAlpha: 1.0\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.Player\", {\n    superClass: \"ps.OutlinedSprite\",\n\n    controllable: true,\n    muteki: false,\n\n    roll: 0,\n\n    speed: 3.6,\n\n    init: function() {\n      this.superInit(\"player\", 32, 32);\n      this.frameIndex = 4;\n    },\n\n    update: function(app) {\n      if (!this.controllable) return;\n\n      var kb = app.keyboard;\n      var gp = app.gamepads.get(0);\n      var p = app.pointer;\n\n      moveVector.set(0, 0);\n\n      moveVector.add(kb.getKeyDirection().mul(this.speed));\n      if (gp) {\n        var stick = gp.getStickDirection();\n        if (0.4 < stick.length()) {\n          moveVector.add(stick.normalize().mul(this.speed));\n        }\n      }\n      if (p.getPointing()) {\n        moveVector.add(p.deltaPosition.mul(2));\n      }\n\n      if (moveVector.x) {\n        this.roll = Math.clamp(this.roll + moveVector.x * 0.1, -4, 4);\n      } else {\n        this.roll *= 0.8;\n        if (Math.abs(this.roll) < 0.1) {\n          this.roll = 0;\n        }\n      }\n      if (this.roll !== 0) {\n        var sign = this.roll / Math.abs(this.roll);\n        var r = ~~(Math.abs(this.roll)) * sign;\n        this.frameIndex = Math.clamp(4 + r, 0, 8);\n      }\n\n      this.position.add(moveVector);\n      this.position.x = Math.clamp(this.position.x, 4, GAMEAREA_WIDTH - 4);\n      this.position.y = Math.clamp(this.position.y, 4, GAMEAREA_HEIGHT - 4);\n    },\n\n    launch: function() {\n      // TODO\n      this.x = GAMEAREA_WIDTH * 0.5;\n      this.y = GAMEAREA_HEIGHT * 0.9;\n    },\n\n  });\n\n  var moveVector = phina.geom.Vector2(0, 0);\n\n  phina.define(\"ps.AfterBurner\", {\n    superClass: \"phina.app.Object2D\",\n\n    init: function() {\n      this.superInit();\n    },\n\n    update: function(app) {\n      if (app.ticker.frame % 2 !== 0) return;\n      phina.display.Sprite(\"particleW\")\n        .setPosition(this.position.x, this.position.y)\n        .on(\"enterframe\", function() {\n          this.position.y += 1.8;\n          this.alpha *= 0.4;\n          if (this.alpha < 0.01) this.remove();\n        })\n        .addChildTo(this.parent);\n    },\n\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.ScoreLabel\", {\n    superClass: \"phina.display.Label\",\n\n    init: function(options) {\n      this.superInit((options || {}).$safe({\n        fill: \"white\",\n        stroke: null,\n        fontSize: FONT_SIZE_L,\n        fontFamily: \"mono\",\n        align: \"right\",\n        baseline: \"middle\",\n      }));\n\n      this.value = Math.rand(0, 10000000000000);\n    },\n\n    formatText: function() {\n      var v = \"\" + Math.floor(this._score);\n      Array.range(5, 0).forEach(function(i) {\n        var s = i * 3;\n        if (s < v.length) {\n          v = v.substring(0, v.length - s) + \",\" + v.substring(v.length - s);\n        }\n      });\n\n      this.text = v;\n    },\n    // formatText: function() {\n    //   var v = \"\" + Math.floor(this._score);\n    //   if (12 < v.length) {\n    //     v = v.substring(0, v.length - 12) + \"兆\" + v.substring(v.length - 12);\n    //   }\n    //   if (8 < v.length) {\n    //     v = v.substring(0, v.length - 8) + \"億\" + v.substring(v.length - 8);\n    //   }\n    //   if (4 < v.length) {\n    //     v = v.substring(0, v.length - 4) + \"万\" + v.substring(v.length - 4);\n    //   }\n\n    //   this.text = v;\n    // },\n\n    _accessor: {\n      value: {\n        get: function() {\n          return this._score;\n        },\n        set: function(v) {\n          this._score = v;\n          this.formatText();\n        }\n      }\n    }\n\n  });\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.Shot\", {\n    superClass: \"phina.display.Sprite\",\n\n    init: function() {\n      this.superInit(\"bullet\", 32, 32);\n      this.frameIndex = 0;\n    },\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.TitleLogoLabel\", {\n    superClass: \"phina.display.Label\",\n\n    init: function(options) {\n      this.superInit((options || {}).$safe({\n        text: \"Phina Shooter\",\n        align: \"center\",\n        fontFamily: \"title\",\n        fontSize: FONT_SIZE_L,\n        stroke: ps.Color.pri[6],\n        fill: ps.Color.pri[13],\n      }));\n    }\n\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.ZankiDisplay\", {\n    superClass: \"ps.ItemDisplay\",\n\n    init: function(initialValue) {\n      this.superInit(\"zanki\", initialValue);\n    },\n\n  });\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.BulletConfig\", {\n\n    speedRate: 3,\n    target: null,\n    bulletLayer: null,\n\n    init: function(target, bulletLayer) {\n      this.target = target;\n      this.bulletLayer = bulletLayer;\n      \n      this.put(\"densityRank\", 0.0);\n      this.put(\"speedRank\", 0.0);\n      this.put(\"burst\", 0);\n    },\n\n    createNewBullet: function(runner, spec) {\n      this.bulletLayer.spawn(runner, spec);\n    },\n    \n    put: function(name, value) {\n      bulletml.Walker.globalScope[\"$\" + name] = value;\n    },\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.GameData\", {\n    superClass: \"phina.util.EventDispatcher\",\n\n    currentStage: 0,\n\n    score: Math.randint(0, 100000000000),\n    zanki: 2,\n    bomb: 3,\n    psyche: Math.randint(0, 100000000000),\n    highScore: Math.randint(0, 100000000000),\n\n    /**\n     * \"normal\" or \"every\"\n     */\n    extendMode: null,\n    extendScore: null,\n\n    init: function() {\n      this.superInit();\n      this._binder = {};\n\n      this.extendMode = \"normal\";\n      this.extendScore = [100000000, 200000000];\n    },\n\n    updateView: function(frame) {\n      if (frame % 5 !== 0) return;\n\n      var self = this;\n      self._binder.forIn(function(name, view) {\n        if (self[name] !== undefined) {\n          view.value = self[name];\n        }\n      });\n    },\n\n    miss: function() {\n      this.zanki -= 1;\n      this.psyche = 0;\n    },\n\n    useBomb: function() {\n      this.bomb -= 1;\n      this.psyche *= 0.7;\n    },\n\n    addPsyche: function(v) {\n      this.psyche += v;\n    },\n\n    addScore: function(v) {\n      var self = this;\n      var before = this.score;\n      var after = this.score + v;\n\n      if (this.extendMode === \"normal\") {\n        this.extendScore.forEach(function(es) {\n          if (before < es && es <= after) {\n            self.zanki += 1;\n            self.flare(\"extend\");\n          }\n        });\n      } else if (this.extendMode === \"every\") {\n        var es = this.extendScore[0];\n        if (Math.floor(before / es) < Math.floor(after / es)) {\n          this.zanki += 1;\n          this.flare(\"extend\");\n        }\n      }\n\n      this.score = after;\n    },\n\n    bind: function(propertyName, view) {\n      this._binder[propertyName] = view;\n    }\n\n  });\n\n});\n","phina.main(function() {\n  var s = 10;\n  var l = s * Math.sqrt(3);\n  var bg = phina.graphics.Canvas();\n  bg.setSize(l * 2, s * 6);\n  bg.strokeStyle = \"hsla(240, 8%, 50%, 0.3)\";\n  bg.strokeLines(\n    l, 0,\n    l, s,\n    0, s * 2,\n    0, s * 4,\n    l, s * 5,\n    l, s * 6\n  );\n  bg.strokeLines(l, s, l * 2, s * 2);\n  bg.strokeLines(l, s * 5, l * 2, s * 4);\n  document.body.style.backgroundImage = \"url({0})\".format(bg.canvas.toDataURL());\n  document.body.style.backgroundRepeat = \"repeat\";\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.EndingScene\", {\n    superClass: \"phina.display.CanvasScene\",\n\n    init: function() {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"black\",\n      });\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.GameoverScene\", {\n    superClass: \"phina.display.CanvasScene\",\n\n    init: function() {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"black\",\n      });\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.GameScene\", {\n    superClass: \"phina.display.CanvasScene\",\n\n    stageId: null,\n    gameData: null,\n    bulletConfig: null,\n\n    init: function(params) {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"hsl(30, 60%, 60%)\",\n      });\n\n      ps.TextureEdit.outline(\"bullet\", \"red\");\n      ps.TextureEdit.outline(\"player\");\n      ps.TextureEdit.outline(\"bomb\", \"lightgreen\");\n\n      var c = phina.graphics.Canvas().setSize(5, 5);\n      c.clearColor(\"rgba(255, 255, 255, 0.5)\");\n      phina.asset.AssetManager.set(\"image\", \"particleW\", c);\n\n      this.stage = ps.Stage.create(params.stageId);\n\n      this.fromJSON({\n        children: {\n          mainLayer: {\n            className: \"ps.gamescene.MainLayer\",\n            arguments: {\n              stage: this.stage,\n            },\n            x: SIDEBAR_WIDTH,\n            y: 0,\n          },\n          leftSideBar: {\n            className: \"ps.gamescene.LeftSideBar\",\n            x: 0,\n            y: 0,\n          },\n          rightSideBar: {\n            className: \"ps.gamescene.RightSideBar\",\n            x: SCREEN_WIDTH - SIDEBAR_WIDTH,\n            y: 0,\n          },\n        }\n      });\n\n      this.gameData = params.gameData;\n      this.leftSideBar.bindGameData(this.gameData);\n      this.rightSideBar.bindGameData(this.gameData);\n      this.bulletConfig = ps.BulletConfig(this.mainLayer.player, this.mainLayer.bulletLayer);\n\n      runner = ps.danmaku.akimoto1.createRunner(this.bulletConfig);\n      runner.x = GAMEAREA_WIDTH * 0.5;\n      runner.y = GAMEAREA_HEIGHT * 0.2;\n    },\n\n    update: function(app) {\n      var frame = app.ticker.frame;\n\n      this.gameData.updateView(frame);\n      runner.update();\n\n      ps.OutlinedSprite.staticAlpha = 0.5 + Math.sin(frame * 0.15) * 0.5;\n    },\n\n    launchEnemy: function(enemy) {\n      // TODO\n    },\n\n  });\n\n  var runner;\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.LoadingScene\", {\n    superClass: \"phina.game.LoadingScene\",\n\n    init: function(params) {\n      this.superInit({\n        assets: ps.Assets.get(params.assetType),\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        lie: false,\n        exitType: \"auto\",\n      });\n      this.fromJSON({\n        backgroundColor: \"black\",\n        children: {\n          label: {\n            className: \"ps.TitleLogoLabel\",\n            arguments: {\n              text: \"downloading\"\n            },\n            x: SCREEN_WIDTH * 0.5,\n            y: SCREEN_HEIGHT * 0.5,\n            onenterframe: function(e) {\n              var c = ~~(e.app.ticker.frame / 10) % 5;\n              this.text = \"downloading\" + \".\".repeat(c);\n            }\n          }\n        }\n      });\n    }\n\n  });\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.NameEntryScene\", {\n    superClass: \"phina.display.CanvasScene\",\n\n    init: function() {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"black\",\n      });\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.ResultScene\", {\n    superClass: \"phina.display.CanvasScene\",\n\n    init: function(params) {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"black\",\n      });\n\n      this.fromJSON({\n        gameData: params.gameData,\n      });\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.SettingScene\", {\n    superClass: \"phina.game.ManagerScene\",\n\n    init: function() {\n      this.superInit({\n        scenes: [\n\n          {\n            label: \"top\",\n            className: \"ps.settingscene.Top\",\n          },\n\n        ],\n      });\n    }\n  });\n\n  phina.define(\"ps.settingscene.Top\", {\n    superClass: \"phina.app.CanvasScene\",\n\n    init: function() {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"black\",\n      });\n    }\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"ps.TitleScene\", {\n    superClass: \"phina.display.CanvasScene\",\n\n    init: function() {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"black\",\n      });\n\n      this.fromJSON({\n        children: {\n          title: {\n            className: \"ps.TitleLogoLabel\",\n            arguments: {\n              fontSize: FONT_SIZE_XL,\n            },\n            x: SCREEN_WIDTH * 0.5,\n            y: SCREEN_HEIGHT * 0.5,\n          }\n        }\n      });\n\n      this.tweener.wait(500).call(function() {\n        this.exit(\"arcadeMode\");\n      }.bind(this));\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.TutorialScene\", {\n    superClass: \"phina.display.CanvasScene\",\n\n    init: function() {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"black\",\n      });\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  /**\n   * arcadeモード\n   */\n  phina.define(\"ps.ArcadeModeSequence\", {\n    superClass: \"phina.game.ManagerScene\",\n    \n    init: function() {\n      \n      var gameData = ps.GameData();\n      \n      this.superInit({\n        scenes: [\n\n          Array.range(0, 5).map(function(stageId) {\n            var stageName = \"stage{0}\".format(stageId);\n            if (stageId < 4) {\n              next = \"stage{0}preload\".format(stageId + 1);\n            } else {\n              next = \"ending\";\n            }\n            return [\n\n              {\n                label: stageName + \"preload\",\n                className: \"ps.LoadingScene\",\n                arguments: {\n                  assetType: stageName\n                },\n                nextLabel: stageName,\n              },\n\n              {\n                label: stageName,\n                className: \"ps.GameScene\",\n                arguments: {\n                  stageId: stageId,\n                  gameData: gameData,\n                },\n                nextLabel: stageName + \"result\",\n              },\n\n              {\n                label: stageName + \"result\",\n                className: \"ps.ResultScene\",\n                arguments: {\n                  gameData: gameData,\n                },\n                nextLabel: next,\n              },\n\n            ];\n          }),\n\n          {\n            label: \"ending\",\n            className: \"ps.EndingScene\",\n            nextLabel: \"gameover\",\n          },\n\n          {\n            label: \"gameover\",\n            className: \"ps.GameoverScene\",\n            nextLabel: \"nameEntry\",\n          },\n\n          {\n            label: \"nameEntry\",\n            className: \"ps.NameEntryScene\",\n          },\n\n        ].flatten(),\n      });\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.MainSequence\", {\n    superClass: \"phina.game.ManagerScene\",\n\n    init: function() {\n      this.superInit({\n        scenes: [\n\n          {\n            label: \"load\",\n            className: \"ps.LoadingScene\",\n            arguments: {\n              assetType: \"common\"\n            },\n            nextLabel: \"title\",\n          },\n\n          {\n            label: \"title\",\n            className: \"ps.TitleScene\",\n          },\n\n          {\n            label: \"arcadeMode\",\n            className: \"ps.ArcadeModeSequence\",\n            nextLabel: \"title\",\n          },\n\n          {\n            label: \"tutorial\",\n            className: \"ps.TutorialScene\",\n            nextLabel: \"title\",\n          },\n\n          {\n            label: \"setting\",\n            className: \"ps.SettingScene\",\n            nextLabel: \"title\",\n          },\n\n          {\n            label: \"ranking\",\n            className: \"ps.RankingScene\",\n            nextLabel: \"title\",\n          },\n\n        ],\n      });\n    }\n  });\n\n});","phina.namespace(function() {\n\n  phina.define(\"ps.RankingScene\", {\n    superClass: \"phina.display.CanvasScene\",\n\n    init: function() {\n      this.superInit({\n        width: SCREEN_WIDTH,\n        height: SCREEN_HEIGHT,\n        backgroundColor: \"black\",\n      });\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.Background1\", {\n    superClass: \"ps.BackgroundLayer\",\n\n    init: function() {\n      this.superInit({\n        backgroundColor: ps.Color.pri[1],\n        fill: ps.Color.pria[7].format(0.2),\n        stroke: ps.Color.pri[4],\n      });\n\n      this.camera.x = 2;\n      this.camera.y = 35;\n      this.camera.z = 8;\n      this.camera.targetY = 3;\n      var frame = 0;\n      this.camera.on(\"enterframe\", function(e) {\n        this.y = 18 + Math.cos(frame * 0.001) * 14;\n        frame += 1;\n      });\n\n      var self = this;\n\n      var dx = 0.02;\n      var dz = 0.08;\n\n      var rangeX2 = 2.6 * 10;\n      var rangeZ2 = 2.6 * 10;\n      var vertices2 = [\n        [0, 0, 0],\n      ];\n      Array.range(-10, 10).forEach(function(z) {\n        Array.range(-10, 10).forEach(function(x) {\n          ps.bg.Polygon({\n              vertices: vertices2,\n            })\n            .setTranslation(x * 2.6, 0, z * 2.6)\n            .addChildTo(self)\n            .on(\"enterframe\", function() {\n              this.x += dx;\n              this.z += dz;\n\n              if (this.x < -rangeX2) this.x += rangeX2 * 2;\n              if (rangeX2 < this.x) this.x += -rangeX2 * 2;\n              if (this.z < -rangeZ2) this.z += rangeZ2 * 2;\n              if (rangeZ2 < this.z) this.z += -rangeZ2 * 2;\n            });\n        });\n      });\n\n      var rangeX = 3.0 * 5.0;\n      var rangeZ = 4.0 * 5.6;\n      var vertices = [\n        [-0.5, 0, -0.5],\n        [-0.5, 0, +0.5],\n        [+0.5, 0, +0.5],\n        [+0.5, 0, -0.5],\n      ];\n      Array.range(-5, 5).forEach(function(z) {\n        Array.range(-5, 5).forEach(function(x) {\n          Array.range(0, Math.randint(4, 9)).forEach(function(y) {\n            ps.bg.Polygon({\n                vertices: vertices,\n              })\n              .setTranslation(x * 3.0, y * 0.21, z * 4.0)\n              .addChildTo(self)\n              .on(\"enterframe\", function() {\n                this.x += dx;\n                this.z += dz;\n\n                if (this.x < -rangeX) this.x += rangeX * 2;\n                if (rangeX < this.x) this.x += -rangeX * 2;\n                if (this.z < -rangeZ) this.z += rangeZ * 2;\n                if (rangeZ < this.z) this.z += -rangeZ * 2;\n              });\n          });\n        });\n      });\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.Stage\", {\n    superClass: \"phina.util.EventDispatcher\",\n\n    waitFor: -1,\n    sequencer: null,\n\n    init: function() {\n      this.superInit();\n\n      this.sequencer = ps.StageSequancer();\n    },\n\n    update: function(app) {\n      var frame = app.ticker.frame;\n      while (this.waitFor <= frame) {\n        var task = this.sequencer.next();\n        if (task) {\n          task.execute(app, app.currentScene, this);\n        }\n      }\n    },\n\n    _static: {\n      create: function(stageId) {\n        switch (stageId) {\n          case 0:\n            return ps.Stage1();\n        }\n      }\n    }\n  });\n\n  phina.define(\"ps.StageSequancer\", {\n\n    init: function() {\n      this.seq = [];\n    },\n\n    addTask: function(task) {\n      this.seq.push(task);\n      return this;\n    },\n\n    next: function() {\n      return this.seq.shift();\n    },\n\n    wait: function(frame) {\n      return this.addTask(ps.StageTask(frame));\n    },\n\n    playBgm: function(bgmData) {\n      return this.addTask(ps.PlayBgmTask(bgmData));\n    },\n\n    stopBgm: function() {\n      return this.addTask(ps.StopBgmTask());\n    },\n\n    warning: function() {\n      return this.addTask(ps.WarningTask());\n    },\n\n    launchEnemy: function(enemyClassName, params) {\n      return this.addTask(ps.LaunchEnemyTask(enemyClassName, params));\n    },\n\n    launchBoss: function(bossClassName) {\n      return this.addTask(ps.LaunchBossTask(bossClassName));\n    },\n  });\n\n  phina.define(\"ps.StageTask\", {\n    init: function() {},\n    execute: function(app, gameScene, stage) {}\n  });\n\n  phina.define(\"ps.WaitTask\", {\n    superClass: \"ps.StageTask\",\n\n    frame: 0,\n\n    init: function(frame) {\n      this.frame = frame;\n    },\n\n    execute: function(app, gameScene, stage) {\n      stage.waitFor = app.ticker.frame + this.frame;\n    }\n  });\n\n  phina.define(\"ps.PlayBgmTask\", {\n    superClass: \"ps.StageTask\",\n\n    bgmData: null,\n\n    init: function(bgmData) {\n      this.superInit();\n      this.bgmData = bgmData;\n    }\n  });\n\n  phina.define(\"ps.StopBgmTask\", {\n    superClass: \"ps.StageTask\",\n\n    init: function() {\n      this.superInit();\n    }\n  });\n\n  phina.define(\"ps.WarningTask\", {\n    superClass: \"ps.StageTask\",\n\n    init: function() {\n      this.superInit();\n    }\n  });\n\n  phina.define(\"ps.LaunchEnemyTask\", {\n    superClass: \"ps.StageTask\",\n\n    enemyClassName: null,\n    params: null,\n\n    init: function(enemyClassName, params) {\n      this.superInit();\n      this.enemyClassName = enemyClassName;\n      this.params = params;\n    }\n  });\n\n  phina.define(\"ps.LaunchBossTask\", {\n    superClass: \"ps.StageTask\",\n\n    bossClassName: null,\n\n    init: function(bossClassName, params) {\n      this.superInit();\n      this.bossClassName = bossClassName;\n      this.params = params;\n    }\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.Stage1\", {\n    superClass: \"ps.Stage\",\n\n    backgroundClassName: \"ps.Background1\",\n\n    init: function() {\n      this.superInit();\n    }\n\n  });\n\n});\n","phina.namespace(function() {\n\n  phina.define(\"ps.TextureEdit\", {\n    init: function() {},\n    _static: {\n      outline: function(textureName, color, lineWidth) {\n        color = color || \"white\";\n        lineWidth = lineWidth || 1;\n\n        var texture = phina.asset.AssetManager.get(\"image\", textureName);\n        if (texture == null) {\n          return;\n        }\n        var w = texture.domElement.width;\n        var h = texture.domElement.height;\n\n        var src = phina.graphics.Canvas().setSize(w, h);\n        src.context.drawImage(texture.domElement, 0, 0);\n\n        var srcData = src.context.getImageData(0, 0, w, h);\n        var data = srcData.data;\n\n        var dst = phina.graphics.Canvas().setSize(w, h);\n        dst.fillStyle = color;\n        for (var y = 0; y < h; y++) {\n          for (var x = 0; x < w; x++) {\n\n            var cIndex = ((y + 0) * w + (x + 0)) * 4 + 3;\n\n            var lIndex = ((y + 0) * w + (x - 1)) * 4 + 3;\n            var rIndex = ((y + 0) * w + (x + 1)) * 4 + 3;\n            var tIndex = ((y - 1) * w + (x + 0)) * 4 + 3;\n            var bIndex = ((y + 1) * w + (x + 0)) * 4 + 3;\n            var l = (0 <= lIndex && lIndex < data.length) ? data[lIndex] : 255;\n            var r = (0 <= rIndex && rIndex < data.length) ? data[rIndex] : 255;\n            var t = (0 <= tIndex && tIndex < data.length) ? data[tIndex] : 255;\n            var b = (0 <= bIndex && bIndex < data.length) ? data[bIndex] : 255;\n\n            var a = data[cIndex];\n\n            if (a > 0 && (l == 0 || r == 0 || t == 0 || b == 0)) {\n              dst.fillRect(x - lineWidth * 0.5, y - lineWidth * 0.5, lineWidth, lineWidth);\n            }\n          }\n        }\n\n        phina.asset.AssetManager.set(\"image\", textureName + \"Outline\", dst);\n      }\n    }\n  });\n\n});\n"],"sourceRoot":"/source/"}