{"version":3,"sources":["main.js","application.js","assets.js","bombdisplay.js","enemy.js","backgroundlayer.js","mainlayer.js","sidebarlayer.js","hudlabel.js","itemdisplay.js","player.js","scorelabel.js","shot.js","titlelogolabel.js","zankidisplay.js","gamedata.js","background.js","endingscene.js","gameoverscene.js","gamescene.js","loadingscene.js","nameentryscene.js","resultscene.js","titlescene.js","gamesequence.js","mainsequence.js","background1.js","stage.js","stage1.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClhRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChrzIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"phina-shooter.js","sourcesContent":["var SCREEN_WIDTH = 480;\r\nvar SCREEN_HEIGHT = 320;\r\n// var SCREEN_WIDTH = 720;\r\n// var SCREEN_HEIGHT = 480;\r\n// var SCREEN_WIDTH = 960;\r\n// var SCREEN_HEIGHT = 640;\r\n\r\nvar GAMEAREA_WIDTH = SCREEN_HEIGHT * 0.7;\r\nvar GAMEAREA_HEIGHT = SCREEN_HEIGHT;\r\n\r\nvar SIDEBAR_WIDTH = (SCREEN_WIDTH - GAMEAREA_WIDTH) * 0.5;\r\nvar SIDEBAR_HEIGHT = SCREEN_HEIGHT;\r\n\r\nvar FONT_SIZE_XL = ~~(0.07 * SCREEN_WIDTH);\r\nvar FONT_SIZE_L = ~~(0.03 * SCREEN_WIDTH);\r\nvar FONT_SIZE_M = ~~(0.02 * SCREEN_WIDTH);\r\nvar FONT_SIZE_S = ~~(0.01 * SCREEN_WIDTH);\r\n\r\nphina.main(function() {\r\n\r\n  var app = ps.Application();\r\n  app.run();\r\n  \r\n  app.enableStats();\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Application\", {\r\n    superClass: \"phina.display.CanvasApp\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        query: \"#app\",\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n      });\r\n      this.fps = 60;\r\n      this.canvas.context.imageSmoothingEnabled = true;\r\n      this.domElement.style.imageRendering = \"pixelated\";\r\n\r\n      this.replaceScene(ps.MainSequence());\r\n\r\n      this.gamepads = phina.input.GamepadManager();\r\n    },\r\n\r\n    update: function() {\r\n      this.mouse.update();\r\n      this.touch.update();\r\n      this.touchList.update();\r\n      this.keyboard.update();\r\n      this.gamepads.update();\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Assets\", {\r\n    _static: {\r\n      get: function(name) {\r\n        switch (name) {\r\n\r\n          case \"common\":\r\n            return {\r\n              image: {\r\n                player: \"asset/player.png\",\r\n                bullet: \"asset/bullets.png\",\r\n                bomb: \"asset/bomb.png\",\r\n\r\n                zanki: \"asset/zankiIcon.png\",\r\n                bombIcon: \"asset/bombIcon.png\",\r\n              },\r\n\r\n              font: {\r\n                title: \"asset/Black_Ops_One/BlackOpsOne-Regular.ttf\",\r\n                main: \"asset/Press_Start_2P/PressStart2P-Regular.ttf\",\r\n                mono: \"asset/VT323/VT323-Regular.ttf\",\r\n                // mono: \"asset/Share_Tech_Mono/ShareTechMono-Regular.ttf\",\r\n              },\r\n            };\r\n\r\n          case \"stage0\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n          case \"stage1\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n          case \"stage2\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n          case \"stage3\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n          case \"stage4\":\r\n            return {\r\n              image: {\r\n                dummy: \"asset/zankiIcon.png\",\r\n              },\r\n            };\r\n\r\n        }\r\n      }\r\n    }\r\n  })\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.BombDisplay\", {\r\n    superClass: \"ps.ItemDisplay\",\r\n\r\n    init: function(initialValue) {\r\n      this.superInit(\"bombIcon\", initialValue);\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Enemy\", {\r\n    superClass: \"phina.display.Sprite\",\r\n\r\n    init: function(params) {\r\n      this.superInit(params.texture, params.width, params.height);\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.BackgroundLayer\", {\r\n    superClass: \"phina.display.Layer\",\r\n\r\n    renderChildBySelf: true,\r\n\r\n    init: function(params) {\r\n      this.superInit({\r\n        width: GAMEAREA_WIDTH,\r\n        height: GAMEAREA_HEIGHT,\r\n      });\r\n      this.setOrigin(0, 0);\r\n      this.backgroundColor = null;\r\n\r\n      this.stroke = params.stroke;\r\n      this.fill = params.fill;\r\n      this.lineWidth = 1;\r\n\r\n      this.camera = ps.bg.Camera().addChildTo(this);\r\n    },\r\n\r\n    render: function() {\r\n      var self = this;\r\n      var cam = this.camera;\r\n      var canvas = this.canvas;\r\n      var w = canvas.canvas.width;\r\n      var h = canvas.canvas.height;\r\n\r\n      canvas.clear();\r\n\r\n      if (self.stroke) {\r\n        canvas.strokeStyle = self.stroke;\r\n        canvas.context.lineWidth = self.lineWidth;\r\n      }\r\n      if (self.fill) {\r\n        canvas.fillStyle = self.fill;\r\n        canvas.fill();\r\n      }\r\n\r\n      for (var i = 0, len = this.children.length; i < len; i++) {\r\n        var child = this.children[i];\r\n        if (child instanceof ps.bg.Polygon) {\r\n          var src = child.render(cam);\r\n          var positions = [];\r\n          for (var s = 0, slen = src.length; s < slen; s++) {\r\n            var pos = src[s];\r\n            if (pos === null) {\r\n              positions = [];\r\n              break;\r\n            } else {\r\n              positions.push(((pos[0] / pos[3]) + 0.5) * w);\r\n              positions.push((-(pos[1] / pos[3]) + 0.5) * h);\r\n            }\r\n          }\r\n\r\n          if (2 <= positions.length) {\r\n            canvas.beginPath();\r\n            canvas.lines.apply(canvas, positions);\r\n            canvas.closePath();\r\n            if (self.stroke) canvas.stroke();\r\n            if (self.fill) canvas.fill();\r\n          }\r\n        }\r\n      }\r\n    },\r\n\r\n    draw: function(canvas) {\r\n      this.render();\r\n\r\n      var image = this.canvas.domElement;\r\n      canvas.context.drawImage(image,\r\n        0, 0, image.width, image.height, -this.width * this.originX, -this.height * this.originY, this.width, this.height\r\n      );\r\n    },\r\n  });\r\n\r\n  phina.define(\"ps.bg.Camera\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n\r\n      this.position = vec3.set(vec3.create(), 5, 3, 50);\r\n      this.target = vec3.set(vec3.create(), 0, 0, 0);\r\n      this.up = vec3.set(vec3.create(), 0, 1, 0);\r\n\r\n      this.vMatrix = mat4.create();\r\n      this.pMatrix = mat4.perspective(mat4.create(), 70, GAMEAREA_WIDTH / GAMEAREA_HEIGHT, 0.1, 10000);\r\n\r\n      this.vpMatrix = mat4.create();\r\n\r\n      this.needsUpdate = true;\r\n    },\r\n\r\n    update: function() {\r\n      if (this.needsUpdate) {\r\n        mat4.lookAt(this.vMatrix, this.position, this.target, this.up);\r\n        mat4.mul(this.vpMatrix, this.pMatrix, this.vMatrix);\r\n        this.needsUpdate = false;\r\n      }\r\n    },\r\n\r\n    _accessor: {\r\n      x: {\r\n        get: function() {\r\n          return this.position[0];\r\n        },\r\n        set: function(v) {\r\n          this.position[0] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      y: {\r\n        get: function() {\r\n          return this.position[1];\r\n        },\r\n        set: function(v) {\r\n          this.position[1] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      z: {\r\n        get: function() {\r\n          return this.position[2];\r\n        },\r\n        set: function(v) {\r\n          this.position[2] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      targetX: {\r\n        get: function() {\r\n          return this.target[0];\r\n        },\r\n        set: function(v) {\r\n          this.target[0] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      targetY: {\r\n        get: function() {\r\n          return this.target[1];\r\n        },\r\n        set: function(v) {\r\n          this.target[1] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      targetZ: {\r\n        get: function() {\r\n          return this.target[2];\r\n        },\r\n        set: function(v) {\r\n          this.target[2] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      upX: {\r\n        get: function() {\r\n          return this.up[0];\r\n        },\r\n        set: function(v) {\r\n          this.up[0] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      upY: {\r\n        get: function() {\r\n          return this.up[1];\r\n        },\r\n        set: function(v) {\r\n          this.up[1] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      upZ: {\r\n        get: function() {\r\n          return this.up[2];\r\n        },\r\n        set: function(v) {\r\n          this.up[2] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n    }\r\n  });\r\n\r\n  phina.define(\"ps.bg.Polygon\", {\r\n    superClass: \"phina.app.Element\",\r\n\r\n    init: function(params) {\r\n      this.superInit();\r\n\r\n      this.vertices = params.vertices.map(function(vertex) {\r\n        return vec4.set(vec4.create(), vertex[0], vertex[1], vertex[2], 1);\r\n      });\r\n\r\n      this.calcPosition = this.vertices.map(function(vertex) {\r\n        return vec4.clone(vertex);\r\n      });\r\n\r\n      this.rotation = quat.create();\r\n      this.translation = vec3.create();\r\n      this.scale = vec3.set(vec3.create(), 1, 1, 1);\r\n\r\n      this.mMatrix = mat4.create();\r\n      this.mvpMatrix = mat4.create();\r\n\r\n      this.needsUpdate = true;\r\n    },\r\n\r\n    update: function() {\r\n      if (this.needsUpdate) {\r\n        // mat4.fromRotationTranslationScale(this.mMatrix, this.rotation, this.translation, this.scale);\r\n        mat4.fromTranslation(this.mMatrix, this.translation);\r\n        this.needsUpdate = false;\r\n      }\r\n    },\r\n\r\n    render: function(camera) {\r\n      var calcPosition = this.calcPosition;\r\n      var mvp = mat4.mul(this.mvpMatrix, camera.vpMatrix, this.mMatrix);\r\n      return this.vertices.map(function(vertex, i) {\r\n        var pos = vec4.transformMat4(calcPosition[i], vertex, mvp);\r\n        if (pos[3] < 0) {\r\n          return null;\r\n        } else {\r\n          return pos;\r\n        }\r\n      });\r\n    },\r\n\r\n    setTranslation: function(x, y, z) {\r\n      this.translation[0] = x;\r\n      this.translation[1] = y;\r\n      this.translation[2] = z;\r\n      return this;\r\n    },\r\n\r\n    _accessor: {\r\n      x: {\r\n        get: function() {\r\n          return this.translation[0];\r\n        },\r\n        set: function(v) {\r\n          this.translation[0] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      y: {\r\n        get: function() {\r\n          return this.translation[1];\r\n        },\r\n        set: function(v) {\r\n          this.translation[1] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n      z: {\r\n        get: function() {\r\n          return this.translation[2];\r\n        },\r\n        set: function(v) {\r\n          this.translation[2] = v;\r\n          this.needsUpdate = true;\r\n        }\r\n      },\r\n    },\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.gamescene.MainLayer\", {\r\n    superClass: \"phina.display.Layer\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: GAMEAREA_WIDTH,\r\n        height: GAMEAREA_HEIGHT,\r\n      });\r\n      this.setOrigin(0, 0);\r\n      this.backgroundColor = \"hsl(240, 100%, 5%)\";\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.gamescene.SideBarLayer\", {\r\n    superClass: \"phina.display.Layer\",\r\n\r\n    skipDraw: false,\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SIDEBAR_WIDTH,\r\n        height: SIDEBAR_HEIGHT,\r\n      });\r\n      this.setOrigin(0, 0);\r\n      this.backgroundColor = \"hsl(0, 100%, 7%)\";\r\n      this.gridX = phina.util.Grid(SIDEBAR_WIDTH, 16);\r\n      this.gridY = phina.util.Grid(SIDEBAR_HEIGHT, 17);\r\n    },\r\n\r\n    bindGameData: function(gameData) {},\r\n\r\n    update: function(app) {\r\n      this.skipDraw = app.ticker.frame % 5 !== 0\r\n    },\r\n\r\n    draw: function(canvas) {\r\n      if (this.skipDraw) {\r\n        var image = this.canvas.domElement;\r\n        canvas.context.drawImage(image,\r\n          0, 0, image.width, image.height, -this.width * this.originX, -this.height * this.originY, this.width, this.height\r\n        );\r\n      } else {\r\n        phina.display.Layer.prototype.draw.call(this, canvas);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  phina.define(\"ps.gamescene.LeftSideBar\", {\r\n    superClass: \"ps.gamescene.SideBarLayer\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this.fromJSON({\r\n        children: {\r\n          scoreLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"SCORE\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(1),\r\n          },\r\n          score: {\r\n            className: \"ps.ScoreLabel\",\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(2),\r\n          },\r\n\r\n          psycheLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"PSYCHE\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(3),\r\n          },\r\n          psyche: {\r\n            className: \"ps.ScoreLabel\",\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(4),\r\n          },\r\n\r\n          highScoreLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"HIGH SCORE\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(15),\r\n          },\r\n          highScore: {\r\n            className: \"ps.ScoreLabel\",\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(16),\r\n          },\r\n        }\r\n      });\r\n    },\r\n\r\n    bindGameData: function(gameData) {\r\n      gameData.bind(\"score\", this.score);\r\n      gameData.bind(\"psyche\", this.psyche);\r\n      gameData.bind(\"highScore\", this.highScore);\r\n    },\r\n\r\n  });\r\n\r\n  phina.define(\"ps.gamescene.RightSideBar\", {\r\n    superClass: \"ps.gamescene.SideBarLayer\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this.fromJSON({\r\n        children: {\r\n          zankiLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"ZANKI\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(1),\r\n          },\r\n          zanki: {\r\n            className: \"ps.ZankiDisplay\",\r\n            arguments: 3 - 1,\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(2),\r\n          },\r\n\r\n          bombLabel: {\r\n            className: \"ps.HudLabel\",\r\n            arguments: {\r\n              text: \"BOMBER\",\r\n            },\r\n            x: this.gridX.span(1),\r\n            y: this.gridY.span(3),\r\n          },\r\n          bomb: {\r\n            className: \"ps.BombDisplay\",\r\n            arguments: 3,\r\n            x: this.gridX.span(15),\r\n            y: this.gridY.span(4),\r\n          },\r\n\r\n          gameTitleLabel: {\r\n            className: \"ps.TitleLogoLabel\",\r\n            x: this.gridX.center(),\r\n            y: this.gridY.span(16),\r\n          },\r\n        }\r\n      });\r\n    },\r\n\r\n    bindGameData: function(gameData) {\r\n      gameData.bind(\"zanki\", this.zanki);\r\n      gameData.bind(\"bomb\", this.bomb);\r\n    },\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.HudLabel\", {\r\n    superClass: \"phina.display.Label\",\r\n\r\n    init: function(options) {\r\n      this.superInit(options.$safe({\r\n        fill: \"white\",\r\n        stroke: null,\r\n        fontSize: FONT_SIZE_M,\r\n        fontFamily: \"main\",\r\n        align: \"left\",\r\n        baseline: \"middle\",\r\n      }));\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.ItemDisplay\", {\r\n    superClass: \"phina.display.CanvasElement\",\r\n\r\n    init: function(textureName, initialValue) {\r\n      this.superInit();\r\n      this.setOrigin(1, 0.5);\r\n      this.textureName = textureName;\r\n\r\n      this._count = initialValue || 0;\r\n      this.updateView();\r\n    },\r\n\r\n    updateView: function() {\r\n      var self = this;\r\n      var t = this.textureName;\r\n      var count = this._count;\r\n\r\n      if (0 < count - this.children.length) {\r\n        (count - this.children.length).times(function(i) {\r\n          var newItem = phina.display.Sprite(t);\r\n          newItem.setPosition(self.children.length * -newItem.width * 1.02, 0)\r\n            .addChildTo(self);\r\n        });\r\n      }\r\n\r\n      this.children.forEach(function(child, i) {\r\n        child.visible = i < count;\r\n      });\r\n    },\r\n\r\n    _accessor: {\r\n      value: {\r\n        get: function() {\r\n          return this._count;\r\n        },\r\n        set: function(v) {\r\n          this._count = v;\r\n          this.updateView();\r\n        }\r\n      }\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Player\", {\r\n    superClass: \"phina.display.Sprite\",\r\n\r\n    controllable: true,\r\n    muteki: false,\r\n\r\n    roll: 0,\r\n\r\n    speed: 3.6,\r\n\r\n    init: function() {\r\n      this.superInit(\"player\", 32, 32);\r\n      this.frameIndex = 4;\r\n    },\r\n\r\n    update: function(app) {\r\n      if (!this.controllable) return;\r\n\r\n      var kb = app.keyboard;\r\n      var gp = app.gamepads.get(0);\r\n      var p = app.pointer;\r\n\r\n      moveVector.set(0, 0);\r\n\r\n      moveVector.add(kb.getKeyDirection().mul(this.speed));\r\n      if (gp) {\r\n        var stick = gp.getStickDirection();\r\n        if (0.4 < stick.length()) {\r\n          moveVector.add(stick.normalize().mul(this.speed));\r\n        }\r\n      }\r\n      if (p.getPointing()) {\r\n        moveVector.add(p.deltaPosition.mul(2));\r\n      }\r\n\r\n      if (moveVector.x) {\r\n        this.roll += moveVector.x * 0.1;\r\n      } else {\r\n        this.roll *= 0.8;\r\n        if (Math.abs(this.roll) < 0.1) {\r\n          this.roll = 0;\r\n        }\r\n      }\r\n      if (this.roll !== 0) {\r\n        var sign = this.roll / Math.abs(this.roll);\r\n        var r = ~~(Math.abs(this.roll)) * sign;\r\n        this.frameIndex = Math.clamp(4 + r, 0, 8);\r\n      }\r\n\r\n      this.position.add(moveVector);\r\n      this.position.x = Math.clamp(this.position.x, 4, GAMEAREA_WIDTH - 4);\r\n      this.position.y = Math.clamp(this.position.y, 4, GAMEAREA_HEIGHT - 4);\r\n    },\r\n\r\n    launch: function() {\r\n      // TODO\r\n      this.x = GAMEAREA_WIDTH * 0.5;\r\n      this.y = GAMEAREA_HEIGHT * 0.9;\r\n    },\r\n\r\n  });\r\n\r\n  var moveVector = phina.geom.Vector2(0, 0);\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.ScoreLabel\", {\r\n    superClass: \"phina.display.Label\",\r\n\r\n    init: function(options) {\r\n      this.superInit((options || {}).$safe({\r\n        fill: \"white\",\r\n        stroke: null,\r\n        fontSize: FONT_SIZE_L,\r\n        fontFamily: \"mono\",\r\n        align: \"right\",\r\n        baseline: \"middle\",\r\n      }));\r\n\r\n      this.value = Math.rand(0, 10000000000000);\r\n    },\r\n\r\n    formatText: function() {\r\n      var v = \"\" + Math.floor(this._score);\r\n      Array.range(5, 0).forEach(function(i) {\r\n        var s = i * 3;\r\n        if (s < v.length) {\r\n          v = v.substring(0, v.length - s) + \",\" + v.substring(v.length - s);\r\n        }\r\n      });\r\n\r\n      this.text = v;\r\n    },\r\n    // formatText: function() {\r\n    //   var v = \"\" + Math.floor(this._score);\r\n    //   if (12 < v.length) {\r\n    //     v = v.substring(0, v.length - 12) + \"兆\" + v.substring(v.length - 12);\r\n    //   }\r\n    //   if (8 < v.length) {\r\n    //     v = v.substring(0, v.length - 8) + \"億\" + v.substring(v.length - 8);\r\n    //   }\r\n    //   if (4 < v.length) {\r\n    //     v = v.substring(0, v.length - 4) + \"万\" + v.substring(v.length - 4);\r\n    //   }\r\n\r\n    //   this.text = v;\r\n    // },\r\n\r\n    _accessor: {\r\n      value: {\r\n        get: function() {\r\n          return this._score;\r\n        },\r\n        set: function(v) {\r\n          this._score = v;\r\n          this.formatText();\r\n        }\r\n      }\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Shot\", {\r\n    superClass: \"phina.display.Sprite\",\r\n\r\n    init: function() {\r\n      this.superInit(\"bullet\", 32, 32);\r\n      this.frameIndex = 0;\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.TitleLogoLabel\", {\r\n    superClass: \"phina.display.Label\",\r\n\r\n    init: function(options) {\r\n      this.superInit((options || {}).$safe({\r\n        text: \"Phina Shooter\",\r\n        align: \"center\",\r\n        fontFamily: \"title\",\r\n        fontSize: FONT_SIZE_L,\r\n        fill: \"hsl(50, 80%, 80%)\",\r\n        stroke: \"hsl(0, 100%, 50%)\",\r\n      }));\r\n    }\r\n\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.ZankiDisplay\", {\r\n    superClass: \"ps.ItemDisplay\",\r\n\r\n    init: function(initialValue) {\r\n      this.superInit(\"zanki\", initialValue);\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.GameData\", {\r\n    superClass: \"phina.util.EventDispatcher\",\r\n\r\n    currentStage: 0,\r\n\r\n    score: 0,\r\n    zanki: 2,\r\n    bomb: 3,\r\n    psyche: 0,\r\n    highScore: 0,\r\n\r\n    /**\r\n     * \"normal\" or \"every\"\r\n     */\r\n    extendMode: null,\r\n    extendScore: null,\r\n\r\n    init: function() {\r\n      this.superInit();\r\n      this._binder = {};\r\n      \r\n      this.extendMode = \"normal\";\r\n      this.extendScore = [100000000, 200000000];\r\n    },\r\n\r\n    updateView: function(frame) {\r\n      if (frame % 5 !== 0) return;\r\n\r\n      var self = this;\r\n      self._binder.forIn(function(name, view) {\r\n        if (self[name] !== undefined) {\r\n          view.value = self[name];\r\n        }\r\n      });\r\n    },\r\n\r\n    miss: function() {\r\n      this.zanki -= 1;\r\n      this.psyche = 0;\r\n    },\r\n\r\n    useBomb: function() {\r\n      this.bomb -= 1;\r\n      this.psyche *= 0.7;\r\n    },\r\n\r\n    addPsyche: function(v) {\r\n      this.psyche += v;\r\n    },\r\n\r\n    addScore: function(v) {\r\n      var self = this;\r\n      var before = this.score;\r\n      var after = this.score + v;\r\n\r\n      if (this.extendMode === \"normal\") {\r\n        this.extendScore.forEach(function(es) {\r\n          if (before < es && es <= after) {\r\n            self.zanki += 1;\r\n            self.flare(\"extend\");\r\n          }\r\n        });\r\n      } else if (this.extendMode === \"every\") {\r\n        var es = this.extendScore[0];\r\n        if (Math.floor(before / es) < Math.floor(after / es)) {\r\n          this.zanki += 1;\r\n          this.flare(\"extend\");\r\n        }\r\n      }\r\n\r\n      this.score = after;\r\n    },\r\n\r\n    bind: function(propertyName, view) {\r\n      this._binder[propertyName] = view;\r\n    }\r\n\r\n  });\r\n\r\n});\r\n","phina.main(function() {\r\n  var s = 10;\r\n  var l = s * Math.sqrt(3);\r\n  var bg = phina.graphics.Canvas();\r\n  bg.setSize(l * 2, s * 6);\r\n  bg.strokeStyle = \"hsla(240, 8%, 50%, 0.3)\";\r\n  bg.strokeLines(\r\n    l, 0,\r\n    l, s,\r\n    0, s * 2,\r\n    0, s * 4,\r\n    l, s * 5,\r\n    l, s * 6\r\n  );\r\n  bg.strokeLines(l, s, l * 2, s * 2);\r\n  bg.strokeLines(l, s * 5, l * 2, s * 4);\r\n  document.body.style.backgroundImage = \"url({0})\".format(bg.canvas.toDataURL());\r\n  document.body.style.backgroundRepeat = \"repeat\";\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.EndingScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.GameoverScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.GameScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    stageId: null,\r\n    gameData: null,\r\n\r\n    init: function(params) {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"hsl(30, 60%, 60%)\",\r\n      });\r\n\r\n      this.fromJSON({\r\n        stageId: params.stageId,\r\n        gameData: params.gameData,\r\n        children: {\r\n          mainLayer: {\r\n            className: \"ps.gamescene.MainLayer\",\r\n            x: SIDEBAR_WIDTH,\r\n            y: 0,\r\n\r\n            children: {\r\n              backgroundLayer: {\r\n                className: \"ps.Background1\",\r\n              },\r\n\r\n              player: {\r\n                className: \"ps.Player\",\r\n                x: GAMEAREA_WIDTH * 0.5,\r\n                y: GAMEAREA_HEIGHT * 0.9,\r\n              },\r\n              \r\n              b: {\r\n                className: \"phina.display.Sprite\",\r\n                arguments: [\"bomb\"],\r\n                x: GAMEAREA_WIDTH * 0.5,\r\n                y: GAMEAREA_HEIGHT * 0.5,\r\n              }\r\n            }\r\n          },\r\n          leftSideBar: {\r\n            className: \"ps.gamescene.LeftSideBar\",\r\n            x: 0,\r\n            y: 0,\r\n          },\r\n          rightSideBar: {\r\n            className: \"ps.gamescene.RightSideBar\",\r\n            x: SCREEN_WIDTH - SIDEBAR_WIDTH,\r\n            y: 0,\r\n          },\r\n        }\r\n      });\r\n\r\n      this.leftSideBar.bindGameData(this.gameData);\r\n      this.rightSideBar.bindGameData(this.gameData);\r\n    },\r\n\r\n    update: function(app) {\r\n      this.gameData.updateView(app.ticker.frame);\r\n    },\r\n\r\n    launchEnemy: function(enemy) {\r\n      // TODO\r\n    },\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.LoadingScene\", {\r\n    superClass: \"phina.game.LoadingScene\",\r\n\r\n    init: function(params) {\r\n      this.superInit({\r\n        assets: ps.Assets.get(params.assetType),\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        lie: false,\r\n        exitType: \"auto\",\r\n      });\r\n      this.fromJSON({\r\n        backgroundColor: \"black\",\r\n        children: {\r\n          label: {\r\n            className: \"ps.TitleLogoLabel\",\r\n            arguments: {\r\n              text: \"downloading\"\r\n            },\r\n            x: SCREEN_WIDTH * 0.5,\r\n            y: SCREEN_HEIGHT * 0.5,\r\n            onenterframe: function(e) {\r\n              var c = ~~(e.app.ticker.frame / 10) % 5;\r\n              this.text = \"downloading\" + \".\".repeat(c);\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n  });\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.NameEntryScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.ResultScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function(params) {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n\r\n      this.fromJSON({\r\n        gameData: params.gameData,\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.TitleScene\", {\r\n    superClass: \"phina.display.CanvasScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        width: SCREEN_WIDTH,\r\n        height: SCREEN_HEIGHT,\r\n        backgroundColor: \"black\",\r\n      });\r\n\r\n      this.fromJSON({\r\n        children: {\r\n          title: {\r\n            className: \"ps.TitleLogoLabel\",\r\n            arguments: {\r\n              fontSize: FONT_SIZE_XL,\r\n            },\r\n            x: SCREEN_WIDTH * 0.5,\r\n            y: SCREEN_HEIGHT * 0.5,\r\n          }\r\n        }\r\n      });\r\n\r\n      this.tweener.wait(500).call(function() {\r\n        this.exit(\"arcadeMode\");\r\n      }.bind(this));\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  /**\r\n   * arcadeモード\r\n   */\r\n  phina.define(\"ps.ArcadeModeSequence\", {\r\n    superClass: \"phina.game.ManagerScene\",\r\n    \r\n    init: function() {\r\n      \r\n      var gameData = ps.GameData();\r\n      \r\n      this.superInit({\r\n        scenes: [\r\n\r\n          Array.range(0, 5).map(function(stageId) {\r\n            var stageName = \"stage{0}\".format(stageId);\r\n            if (stageId < 4) {\r\n              next = \"stage{0}preload\".format(stageId + 1);\r\n            } else {\r\n              next = \"ending\";\r\n            }\r\n            return [\r\n\r\n              {\r\n                label: stageName + \"preload\",\r\n                className: \"ps.LoadingScene\",\r\n                arguments: {\r\n                  assetType: stageName\r\n                },\r\n                nextLabel: stageName,\r\n              },\r\n\r\n              {\r\n                label: stageName,\r\n                className: \"ps.GameScene\",\r\n                arguments: {\r\n                  stageId: stageId,\r\n                  gameData: gameData,\r\n                },\r\n                nextLabel: stageName + \"result\",\r\n              },\r\n\r\n              {\r\n                label: stageName + \"result\",\r\n                className: \"ps.ResultScene\",\r\n                arguments: {\r\n                  gameData: gameData,\r\n                },\r\n                nextLabel: next,\r\n              },\r\n\r\n            ];\r\n          }),\r\n\r\n          {\r\n            label: \"ending\",\r\n            className: \"ps.EndingScene\",\r\n            nextLabel: \"gameover\",\r\n          },\r\n\r\n          {\r\n            label: \"gameover\",\r\n            className: \"ps.GameoverScene\",\r\n            nextLabel: \"nameEntry\",\r\n          },\r\n\r\n          {\r\n            label: \"nameEntry\",\r\n            className: \"ps.NameEntryScene\",\r\n          },\r\n\r\n        ].flatten(),\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.MainSequence\", {\r\n    superClass: \"phina.game.ManagerScene\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        scenes: [\r\n\r\n          {\r\n            label: \"load\",\r\n            className: \"ps.LoadingScene\",\r\n            arguments: {\r\n              assetType: \"common\"\r\n            },\r\n            nextLabel: \"title\",\r\n          },\r\n\r\n          {\r\n            label: \"title\",\r\n            className: \"ps.TitleScene\",\r\n          },\r\n\r\n          {\r\n            label: \"arcadeMode\",\r\n            className: \"ps.ArcadeModeSequence\",\r\n            nextLabel: \"title\",\r\n          },\r\n          \r\n        ],\r\n\r\n        startLabel: \"load\",\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Background1\", {\r\n    superClass: \"ps.BackgroundLayer\",\r\n\r\n    init: function() {\r\n      this.superInit({\r\n        // fill: \"hsla(40, 80%, 80%, 0.4)\",\r\n        fill: null,\r\n        stroke: \"hsl(20, 80%, 20%)\",\r\n      });\r\n\r\n      this.camera.x = -1;\r\n      this.camera.y = 20;\r\n      this.camera.z = 5;\r\n      this.camera.tweener.to({\r\n        x: 1,\r\n        y: 10,\r\n      }, 3000, \"easeOutQuad\");\r\n\r\n      var self = this;\r\n\r\n      var dx = 0.04 / 5;\r\n      var dz = 0.04;\r\n      var rangeX = 1.8 * 5;\r\n      var rangeZ = 2.6 * 5;\r\n\r\n      var vertices = [\r\n        [-0.5, 0, -0.5],\r\n        [-0.5, 0, +0.5],\r\n        [+0.5, 0, +0.5],\r\n        [+0.5, 0, -0.5],\r\n      ];\r\n\r\n      Array.range(-5, 5).forEach(function(z) {\r\n        Array.range(-5, 5).forEach(function(x) {\r\n          Array.range(0, 8).forEach(function(y) {\r\n            ps.bg.Polygon({\r\n                vertices: vertices,\r\n              })\r\n              .setTranslation(x * 1.8, y * 0.3, z * 2.6)\r\n              .addChildTo(self)\r\n              .on(\"enterframe\", function() {\r\n                this.x += dx;\r\n                this.z += dz;\r\n\r\n                if (this.x < -rangeX) this.x += rangeX * 2;\r\n                if (rangeX < this.x) this.x += -rangeX * 2;\r\n                if (this.z < -rangeZ) this.z += rangeZ * 2;\r\n                if (rangeZ < this.z) this.z += -rangeZ * 2;\r\n              });\r\n          });\r\n        });\r\n      });\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n\r\n  phina.define(\"ps.Stage\", {\r\n    superClass: \"phina.util.EventDispatcher\",\r\n\r\n    waitFor: -1,\r\n    sequencer: null,\r\n\r\n    init: function() {\r\n      this.superInit();\r\n\r\n      this.sequencer = ps.StageSequancer();\r\n    },\r\n\r\n    update: function(app) {\r\n      var frame = app.ticker.frame;\r\n      while (this.waitFor <= frame) {\r\n        var task = this.sequencer.next();\r\n        if (task) {\r\n          task.execute(app, app.currentScene, this);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  phina.define(\"ps.StageSequancer\", {\r\n\r\n    init: function() {\r\n      this.seq = [];\r\n    },\r\n\r\n    addTask: function(task) {\r\n      this.seq.push(task);\r\n      return this;\r\n    },\r\n\r\n    next: function() {\r\n      return this.seq.shift();\r\n    },\r\n\r\n    wait: function(frame) {\r\n      return this.addTask(ps.StageTask(frame));\r\n    },\r\n\r\n    playBgm: function(bgmData) {\r\n      return this.addTask(ps.PlayBgmTask(bgmData));\r\n    },\r\n\r\n    stopBgm: function() {\r\n      return this.addTask(ps.StopBgmTask());\r\n    },\r\n\r\n    warning: function() {\r\n      return this.addTask(ps.WarningTask());\r\n    },\r\n\r\n    launchEnemy: function(enemyClassName, params) {\r\n      return this.addTask(ps.LaunchEnemyTask(enemyClassName, params));\r\n    },\r\n\r\n    launchBoss: function(bossClassName) {\r\n      return this.addTask(ps.LaunchBossTask(bossClassName));\r\n    },\r\n  });\r\n\r\n  phina.define(\"ps.StageTask\", {\r\n    init: function() {},\r\n    execute: function(app, gameScene, stage) {}\r\n  });\r\n\r\n  phina.define(\"ps.WaitTask\", {\r\n    superClass: \"ps.StageTask\",\r\n\r\n    frame: 0,\r\n\r\n    init: function(frame) {\r\n      this.frame = frame;\r\n    },\r\n\r\n    execute: function(app, gameScene, stage) {\r\n      stage.waitFor = app.ticker.frame + this.frame;\r\n    }\r\n  });\r\n\r\n  phina.define(\"ps.PlayBgmTask\", {\r\n    superClass: \"ps.StageTask\",\r\n\r\n    bgmData: null,\r\n\r\n    init: function(bgmData) {\r\n      this.superInit();\r\n      this.bgmData = bgmData;\r\n    }\r\n  });\r\n\r\n  phina.define(\"ps.StopBgmTask\", {\r\n    superClass: \"ps.StageTask\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n    }\r\n  });\r\n\r\n  phina.define(\"ps.WarningTask\", {\r\n    superClass: \"ps.StageTask\",\r\n\r\n    init: function() {\r\n      this.superInit();\r\n    }\r\n  });\r\n\r\n  phina.define(\"ps.LaunchEnemyTask\", {\r\n    superClass: \"ps.StageTask\",\r\n\r\n    enemyClassName: null,\r\n    params: null,\r\n\r\n    init: function(enemyClassName, params) {\r\n      this.superInit();\r\n      this.enemyClassName = enemyClassName;\r\n      this.params = params;\r\n    }\r\n  });\r\n\r\n  phina.define(\"ps.LaunchBossTask\", {\r\n    superClass: \"ps.StageTask\",\r\n\r\n    bossClassName: null,\r\n\r\n    init: function(bossClassName, params) {\r\n      this.superInit();\r\n      this.bossClassName = bossClassName;\r\n      this.params = params;\r\n    }\r\n  });\r\n\r\n});\r\n","phina.namespace(function() {\r\n  \r\n  phina.define(\"ps.Stage1\", {\r\n    superClass: \"ps.Stage\",\r\n    \r\n    init: function() {\r\n      this.superInit();\r\n    }\r\n\r\n  });\r\n  \r\n});\r\n"],"sourceRoot":"/source/"}